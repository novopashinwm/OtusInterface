<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ExtendedXmlSerializer</name>
    </assembly>
    <members>
        <member name="T:ExtendedXmlSerializer.Configuration.CompositeConfigurationProfile">
            <summary>
            Used to define a configuration profile composed of multiple configurations.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.CompositeConfigurationProfile.#ctor(ExtendedXmlSerializer.Core.Sources.IAlteration{ExtendedXmlSerializer.Configuration.IConfigurationContainer}[])">
            <summary>
            Creates a new instance.
            </summary>
            <param name="profiles">Configuration profiles to apply to a configuration container.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.CompositeConfigurationProfile.#ctor(System.Collections.Generic.IEnumerable{ExtendedXmlSerializer.Core.Sources.IAlteration{ExtendedXmlSerializer.Configuration.IConfigurationContainer}})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="profiles">Configuration profiles to apply to a configuration container.</param>
        </member>
        <member name="T:ExtendedXmlSerializer.Configuration.ConfigurationContainer">
            <summary>
            Root-level component that is used to create serializers.  The configuration container contains all the applied
            configurations which are then applied when the <see cref="M:ExtendedXmlSerializer.Configuration.ContextBase.Create"/> is called, creating the fully
            configured serializer. This is considered the entry component for ExtendedXmlSerializer and is used extensively for
            configuration and resulting creation.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.ConfigurationContainer.#ctor">
            <summary>
            Creates a instance, using <see cref="P:ExtendedXmlSerializer.ExtensionModel.DefaultExtensions.Default"/> as the set of extensions to use.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.ConfigurationContainer.#ctor(ExtendedXmlSerializer.ExtensionModel.ISerializerExtension[])">
            <summary>
            Creates a new instance with the provided set of extensions.
            </summary>
            <param name="extensions">The initial set of extensions to populate the container.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.ConfigurationContainer.#ctor(ExtendedXmlSerializer.Configuration.IExtensionCollection)">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.ConfigurationContainer.#ctor(ExtendedXmlSerializer.Configuration.ITypeConfigurationContext)">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.ConfigurationContainer.#ctor(ExtendedXmlSerializer.Configuration.IRootContext)">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.ConfigurationContainer.Extend(ExtendedXmlSerializer.ExtensionModel.ISerializerExtension)">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.ConfigurationContainer.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.Configuration.ConfiguredContainer">
            <summary>
            Entry point for creating containers by way of profiles, which are pre-configured container configurations.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.ConfiguredContainer.New``1">
            <summary>
            Creates a new configuration with the referenced profile type applied to it.
            </summary>
            <typeparam name="T">The referenced profile type.</typeparam>
            <returns>A configured configuration container with the referenced configuration profile applied to it.
            </returns>
        </member>
        <member name="T:ExtendedXmlSerializer.Configuration.ConfiguredSerializer`1">
            <summary>
            Defines, instantiates, and applies a profile to a serializer, which is also instantiated.  A profile is a stored
            preset configuration that can be applied to a serializer.
            </summary>
            <typeparam name="T">The profile type.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.ConfiguredSerializer`1.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.ConfiguredSerializer`1.#ctor(ExtendedXmlSerializer.IExtendedXmlSerializer)">
            <summary>
            Creates a new instance with the provided serializer.
            </summary>
            <param name="serializer">The serializer to decorate.</param>
        </member>
        <member name="T:ExtendedXmlSerializer.Configuration.ContentsDecorationContext`1">
            <summary>
            Used to establish a fluent context for decorating the <see cref="T:ExtendedXmlSerializer.ContentModel.Content.IContents"/> component when configuring the
            configuration container.
            </summary>
            <typeparam name="T">The IContents type.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.ContentsDecorationContext`1.#ctor(ExtendedXmlSerializer.ExtensionModel.IServiceRepository)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="repository">The service repository to configure.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.ContentsDecorationContext`1.When``1">
            <summary>
            Configures the <see cref="T:ExtendedXmlSerializer.ContentModel.Content.IContents"/> to use the configured context type when the provided specification is satisfied.
            </summary>
            <typeparam name="TSpecification">The specification to use for determining which IContents to use.  When this
            specification evaluates to true, the currently configured context type will be used.  Otherwise, the previous
            IContents will be utilized instead.</typeparam>
            <returns>The configured repository.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.ContentsDecorationContext`1.When(ExtendedXmlSerializer.Core.Specifications.ISpecification{System.Reflection.TypeInfo})">
            <summary>
            Configures the <see cref="T:ExtendedXmlSerializer.ContentModel.Content.IContents"/> to use the configured context type when the provided specification is
            satisfied.
            </summary>
            <param name="specification">The specification to use for determining which IContents to use.  When this
            specification evaluates to true, the currently configured context type will be used.  Otherwise, the previous
            IContents will be utilized instead.</param>
            <returns>The configured repository.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.ContentsDecorationContext`1.When(System.Func{System.Reflection.TypeInfo,System.Boolean})">
            <summary>
            Configures the <see cref="T:ExtendedXmlSerializer.ContentModel.Content.IContents"/> to use the configured context type when the provided specification delegate
            is satisfied.
            </summary>
            <param name="specification">The delegate to use for determining which IContents to use.  When this delegate
            evaluates to true, the currently configured context type will be used.  Otherwise, the previous IContents will be
            utilized instead.</param>
            <returns>The configured repository.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.ContentsDecorationContext`1.Then">
            <summary>
            Decorates <see cref="T:ExtendedXmlSerializer.ContentModel.Content.IContents"/> with the currently configured context type and returns the configured service
            repository.
            </summary>
            <returns>The configured repository.</returns>
        </member>
        <member name="T:ExtendedXmlSerializer.Configuration.ContextBase">
            <summary>
            A base component used by configuration components to assume shared functionality.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.ContextBase.#ctor(ExtendedXmlSerializer.Configuration.IContext)">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.ContextBase.#ctor(ExtendedXmlSerializer.Configuration.IRootContext,ExtendedXmlSerializer.Configuration.IContext)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="root"></param>
            <param name="parent"></param>
        </member>
        <member name="P:ExtendedXmlSerializer.Configuration.ContextBase.Root">
            <summary>
            The root context.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.Configuration.ContextBase.Parent">
            <summary>
            Represents this context's parent.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.ContextBase.Create">
            <inheritdoc cref="M:ExtendedXmlSerializer.Configuration.IRootContext.Create" />
        </member>
        <member name="T:ExtendedXmlSerializer.Configuration.ElementDecorationContext`1">
            <summary>
            Used to establish a fluent context for decorating the <see cref="T:ExtendedXmlSerializer.ContentModel.Content.IElement"/> component when configuring the
            configuration container.
            </summary>
            <typeparam name="T">The decorating type of type IElement with which to establish the context.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.ElementDecorationContext`1.#ctor(ExtendedXmlSerializer.ExtensionModel.IServiceRepository)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="repository">The repository to configure.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.ElementDecorationContext`1.When(ExtendedXmlSerializer.Core.Specifications.ISpecification{System.Reflection.TypeInfo})">
            <summary>
            Configures the container's <see cref="T:ExtendedXmlSerializer.ContentModel.Content.IElement"/> to use the decorated type when the provided specification is
            satisfied.
            </summary>
            <param name="specification">The specification to use for determining which IElement to use.  When this
            specification evaluates to true, the currently configured context type will be used.  Otherwise, the previous
            IElement will be utilized instead.</param>
            <returns>The configured repository.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.ElementDecorationContext`1.When``1">
            <summary>
            Configures the container's <see cref="T:ExtendedXmlSerializer.ContentModel.Content.IElement"/> to use the decorated type when the provided specification is
            satisfied.
            </summary>
            <typeparam name="TSpecification">The type of specification to activate via service location.</typeparam>
            <returns>The configured repository</returns>
        </member>
        <member name="T:ExtendedXmlSerializer.Configuration.EmitBehaviors">
            <summary>
            A set of built-in, identified behaviors that configure how a serializer emits content when it serializes an object.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.Configuration.EmitBehaviors.Always">
            <summary>
            Ensures that content is always emitted, regardless of its value.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.Configuration.EmitBehaviors.Classic">
            <summary>
            Follows the classic serializer behavior for emitting content.  For classic serialization, the serializer always
            emits the value when it is a <see cref="T:System.Enum"/>.  Otherwise, it emits if the value is assigned (non-null).
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.Configuration.EmitBehaviors.WhenAssigned">
            <summary>
            This configures the container to emit when the value is assigned.  That is, not null.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.Configuration.EmitBehaviors.WhenModified">
            <summary>
            This is a variant of the <see cref="P:ExtendedXmlSerializer.Configuration.EmitBehaviors.WhenAssigned"/> behavior.  With this behavior, the serializer emits when the
            value is different from the defined value in the class.  For instance, if you have a property `public bool
            MyProperty {get; set} = true` and `MyProperty` is `false` upon serialization, then the content is emitted.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.Configuration.EmitBehaviors.Assigned">
            <exclude />
        </member>
        <member name="P:ExtendedXmlSerializer.Configuration.EmitBehaviors.NotDefault">
            <exclude />
        </member>
        <member name="T:ExtendedXmlSerializer.Configuration.IConfigurationContainer">
            <summary>
            Root-level component that is used to create serializers.  The configuration container contains all the applied
            configurations which are then applied when the serializer is created, creating the fully configured serializer.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.IConfigurationContainer.Extend(ExtendedXmlSerializer.ExtensionModel.ISerializerExtension)">
            <summary>
            Used to extend this container with an extension.
            </summary>
            <param name="extension">The extension to add to this configuration container.</param>
            <returns>The configured configuration container with the extension applied.</returns>
        </member>
        <member name="T:ExtendedXmlSerializer.Configuration.IConfigurationProfile">
            <summary>
            Used as a mechanism to encapsulate a set of pre-determined configurations to apply to a provided container.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.Configuration.IContext">
            <summary>
            A general context component that is used by the configuration API.  Should not be used by external applications.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.Configuration.IContext.Root">
            <summary>
            Provides access to the root context.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.Configuration.IContext.Parent">
            <summary>
            Provides access to the context's parent context.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.Configuration.IEmitBehavior">
            <summary>
            A specialized configuration component that is intended to alter the way the serializer emits content.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.Configuration.IExtensionCollection">
            <summary>
            A specialized collection that manages a set of serializer extensions.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.IExtensionCollection.Contains``1">
            <summary>
            Used to determine if a particular extension type is contained within the collection.
            </summary>
            <typeparam name="T">The extension type.</typeparam>
            <returns>`true` if the collection contains the type, otherwise `false`.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.IExtensionCollection.Find``1">
            <summary>
            Finds an extension of the provided type in the collection.
            </summary>
            <typeparam name="T">The requested type.</typeparam>
            <returns>The located extension, if found. `null` otherwise.</returns>
        </member>
        <member name="T:ExtendedXmlSerializer.Configuration.IMemberConfiguration`2">
            <summary>
            Represents a strongly-typed member configuration.  This is the harness on which all configurations to a type's
            member are applied.
            </summary>
            <typeparam name="T">The member's containing type.</typeparam>
            <typeparam name="TMember">The value type of the member.</typeparam>
        </member>
        <member name="T:ExtendedXmlSerializer.Configuration.IMemberConfiguration">
            <summary>
            Represents a generalized member configuration.  This is the harness on which all configurations to a type's member
            are applied.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.Configuration.IMemberConfigurations">
            <summary>
            Represents a store of member configurations.  Considered internal framework code and not to be used by external applications.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.Configuration.IProperty`1">
            <summary>
            A general purpose (attached)
            property object that stores information and can in turn be used and stored by components that use
            it.  This is considered internal code and not to be used by external applications.
            </summary>
            <typeparam name="T">The property's value type.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.IProperty`1.Assign(`0)">
            <summary>
            Used to assign a value for the property.
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:ExtendedXmlSerializer.Configuration.IRootContext">
            <summary>
            Represents a root context object in the configuration API. This is considered internal code and not to be used by
            external applications.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.Configuration.IRootContext.Types">
            <summary>
            A list of type configurations found in this context.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.IRootContext.Create">
            <summary>
            The main event.  Used to create a new serializer and apply any configurations to it.
            </summary>
            <returns>The configured serializer.</returns>
        </member>
        <member name="T:ExtendedXmlSerializer.Configuration.ITypeConfiguration`1">
            <summary>
            A root-level component that represents a strongly-typed type configuration. A type configuration is used to
            customize and configure a type in a container, which is then further utilized when it creates a serializer.  These
            customizations are then used when an instance of the type configuration is serialized or deserialized by the
            serializer.
            </summary>
            <typeparam name="T">The type under configuration.</typeparam>
        </member>
        <member name="T:ExtendedXmlSerializer.Configuration.ITypeConfiguration">
            <summary>
            A root-level component that represents a generalized type configuration. A type configuration is used to customize and configure a type in a
            container, which is then further utilized when it creates a serializer.  These customizations are then used when an
            instance of the type configuration is serialized or deserialized by the serializer.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.Configuration.ITypeConfigurationContext">
            <summary>
            This is considered internal code and not to be used by external applications.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.Configuration.ITypeConfigurations">
            <summary>
            Represents a store of type configurations.  This is considered internal code and not to be used by external
            applications.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.Configuration.MemberInfo`1">
            <summary>
            Represents a strongly-typed member data. This is considered internal code and not to be used by external
            applications.
            </summary>
            <typeparam name="T">The member's value type.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.MemberInfo`1.#ctor(System.Reflection.MemberInfo)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.Configuration.MemberRegistrationContext`2">
            <summary>
            Establishes a context to apply registrations to a member configuration.
            </summary>
            <typeparam name="T">The member's containing type.</typeparam>
            <typeparam name="TMember">The member's value type.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.MemberRegistrationContext`2.#ctor(ExtendedXmlSerializer.Configuration.IMemberConfiguration{`0,`1})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="member">The member configuration to configure.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.MemberRegistrationContext`2.Serializer">
            <summary>
            Establishes a new context to configure the serializer registration for this context's member configuration.
            </summary>
            <returns>A context to configure serializer registration.</returns>
        </member>
        <member name="T:ExtendedXmlSerializer.Configuration.MemberSerializationRegistrationContext`2">
            <summary>
            Establishes a serialization registration context for a member configuration.
            </summary>
            <typeparam name="T">The member's containing type.</typeparam>
            <typeparam name="TMember">The member's value type.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.MemberSerializationRegistrationContext`2.#ctor(ExtendedXmlSerializer.Configuration.IMemberConfiguration{`0,`1})">
            <summary>
            Create a new instance.
            </summary>
            <param name="member">The member configuration to configure.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.MemberSerializationRegistrationContext`2.Of``1">
            <summary>
            Used to activate the specified strongly-typed definition and register it as this member's serializer.  Doing so
            will allow you to design your serializer to import dependencies into its constructor.
            </summary>
            <typeparam name="TSerializer">The serializer type to activate.</typeparam>
            <returns>The configured member configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.MemberSerializationRegistrationContext`2.Of(System.Type)">
            <summary>
            Used to activate the specified type and register it as this member's serializer.  Doing so will allow you to
            design your serializer to import dependencies into its constructor.
            </summary>
            <returns>The configured member configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.MemberSerializationRegistrationContext`2.ByCalling(System.Action{ExtendedXmlSerializer.ContentModel.Format.IFormatWriter,`1},System.Func{ExtendedXmlSerializer.ContentModel.Format.IFormatReader,`1})">
            <summary>
            Registers a new serializer with the provided delegates.
            </summary>
            <param name="serialize">The delegate to call when serializing an instance of the member's value.</param>
            <param name="deserialize">The delegate to call when deserializing an instance of the member's value.</param>
            <returns>The configured member configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.MemberSerializationRegistrationContext`2.Using(ExtendedXmlSerializer.ContentModel.ISerializer{`1})">
            <summary>
            Provides an instance of a serializer to register as this member's serializer.
            </summary>
            <param name="serializer">The serializer to use to serialize/deserialize instances of this member's value.</param>
            <returns>The configured member configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.MemberSerializationRegistrationContext`2.Using(ExtendedXmlSerializer.ContentModel.ISerializer)">
            <summary>
            Provides an instance of a serializer to register as this member's serializer.
            </summary>
            <param name="serializer">The serializer to use to serialize/deserialize instances of this member's value.</param>
            <returns>The configured member configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.MemberSerializationRegistrationContext`2.None">
            <summary>
            Clears any serializer that is registered with this type.  This will result in this member using the default
            serialization/deserialization mechanisms of the root serializer for this member's value type.
            </summary>
            <returns>The configured member configuration.</returns>
        </member>
        <member name="T:ExtendedXmlSerializer.Configuration.ReferencedDeserializationContext`1">
            <summary>
            Establishes a context for referenced (or targeted) deserialization whereby an existing instance is provided to
            assign values into, rather than the default behavior of activating a new instance where the values are assigned.
            </summary>
            <typeparam name="T">The type under configuration.</typeparam>
            <seealso cref="M:ExtendedXmlSerializer.ExtensionMethodsForExtensionModel.UsingTarget``1(ExtendedXmlSerializer.IExtendedXmlSerializer,``0)"/>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.ReferencedDeserializationContext`1.#ctor(ExtendedXmlSerializer.IExtendedXmlSerializer,`0)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="this">The serializer to configure.</param>
            <param name="existing">The existing target instance.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.ReferencedDeserializationContext`1.#ctor(ExtendedXmlSerializer.IExtendedXmlSerializer,`0,System.Xml.XmlReaderSettings)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="serializer">The serializer to configure.</param>
            <param name="existing">The existing target instance.</param>
            <param name="settings">The xml reader settings used for deserialization.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.ReferencedDeserializationContext`1.Deserialize(System.String)">
            <summary>
            Deserializes a document represented by the provided text and assigns any values into the provided instance context.
            </summary>
            <param name="data">Text that represents an Xml document.</param>
            <returns>The initial provided target instance, assigned with values discovered in the provided document.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.ReferencedDeserializationContext`1.Deserialize(System.Xml.XmlReaderSettings,System.String)">
            <summary>
            Deserializes a document represented by the provided text and assigns any values into the provided instance
            context, using the provided reader settings.
            </summary>
            <param name="settings">The xml reader settings to apply during document processing.</param>
            <param name="data">Text that represents an Xml document.</param>
            <returns>The initial provided target instance, assigned with values discovered in the provided document.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.ReferencedDeserializationContext`1.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes a document represented by the provided <paramref name="stream"/> and assigns any values into the provided instance
            context.
            </summary>
            <param name="stream">The stream representing the source document.</param>
            <returns>The initial provided target instance, assigned with values discovered in the provided document.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.ReferencedDeserializationContext`1.Deserialize(System.Xml.XmlReaderSettings,System.IO.Stream)">
            <summary>
            Deserializes a document represented by the provided stream and assigns any values into the provided instance
            context, using the provided reader settings.
            </summary>
            <param name="settings">The xml reader settings to apply during document processing.</param>
            <param name="stream">The stream representing the source document.</param>
            <returns>The initial provided target instance, assigned with values discovered in the provided document.</returns>
        </member>
        <member name="T:ExtendedXmlSerializer.Configuration.ServicesFactory">
            <summary>
            This is considered internal framework code and is not intended to be used by external applications.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.Configuration.ServicesFactory.Default">
            <summary>
            The default instance.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.ServicesFactory.#ctor(LightInject.IConstructorSelector,LightInject.ContainerOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:ExtendedXmlSerializer.Configuration.ServicesFactory"/> class.
            </summary>
            <param name="selector">The selector.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.ServicesFactory.Get(ExtendedXmlSerializer.Configuration.IExtensionCollection)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.Configuration.TypeConverterRegistrationContext`1">
            <summary>
            Establishes context that enables converter registration operations to be performed on the subject type
            configuration.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.TypeConverterRegistrationContext`1.#ctor(ExtendedXmlSerializer.Configuration.ITypeConfiguration{`0})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="configuration">The type configuration under configuration.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.TypeConverterRegistrationContext`1.ByCalling(System.Func{`0,System.String},System.Func{System.String,`0})">
            <summary>
            Registers a converter for the provided type.  This defines how to deconstruct an instance of the currently
            configured type into a string for serialization, and to construct an instance of the currently configured type
            from a string during deserialization.
            </summary>
            <param name="format">The formatter to use during serialization.</param>
            <param name="parse">The parser to use during deserialization.</param>
            <returns>The configured type container.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.TypeConverterRegistrationContext`1.Using(ExtendedXmlSerializer.ContentModel.Conversion.IConverter{`0})">
            <summary>
            Registers a converter for the provided type.  This defines how to deconstruct an instance of the currently
            configured type into a string for serialization, and to construct an instance of the currently configured type
            from a string during deserialization.
            </summary>
            <param name="converter">The converter to register.</param>
            <returns>The configured type container.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.TypeConverterRegistrationContext`1.Without(ExtendedXmlSerializer.ContentModel.Conversion.IConverter)">
            <summary>
            Removes the registration (if any) from the container's converter registration.
            </summary>
            <param name="converter">The converter to remove from registration.</param>
            <returns>The configured type container.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.TypeConverterRegistrationContext`1.Without(ExtendedXmlSerializer.ContentModel.Conversion.IConverter{`0})">
            <summary>
            Removes the registration (if any) from the container's converter registration.
            </summary>
            <param name="converter">The converter to remove from registration.</param>
            <returns>The configured type container.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.TypeConverterRegistrationContext`1.None">
            <summary>
            Removes all registered converters that work with the currently configured type.
            </summary>
            <returns>The configured type configuration.</returns>
        </member>
        <member name="T:ExtendedXmlSerializer.Configuration.TypeRegistrationContext`1">
            <summary>
            Used to establish a content regstration context for a type configuration.  Using this context you can further
            establish registration contexts for serializers or converters.
            </summary>
            <typeparam name="T">The type under configuration.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.TypeRegistrationContext`1.#ctor(ExtendedXmlSerializer.Configuration.ITypeConfiguration{`0})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="configuration">The type configuration to configure.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.TypeRegistrationContext`1.Serializer">
            <summary>
            Establishes a Serializer-registration context.
            </summary>
            <returns>A context to perform operations on serializer registrations for the captured type configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.TypeRegistrationContext`1.Converter">
            <summary>
            Establishes a Converter-registration context.
            </summary>
            <returns>A context to perform operations on converter registrations for the captured type configuration.</returns>
        </member>
        <member name="T:ExtendedXmlSerializer.Configuration.TypeSerializationRegistrationContext`1">
            <summary>
            Used to configure the serializer that is used to write this object to the output document during the serialization
            process, and to read from the provided document during the deserialization process.
            </summary>
            <typeparam name="T">The type under configuration.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.TypeSerializationRegistrationContext`1.#ctor(ExtendedXmlSerializer.Configuration.ITypeConfiguration{`0})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="configuration">The type configuration under configuration.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.TypeSerializationRegistrationContext`1.Composer">
            <summary>
            Establishes a content-composition context.
            </summary>
            <returns>A context to perform operations for registering content serializer composition for the type under
            configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.TypeSerializationRegistrationContext`1.Of``1">
            <summary>
            Used to activate the specified type and register it as this type's serializer.  Doing so will allow you to design your serializer to import dependencies into its constructor.
            </summary>
            <typeparam name="TSerializer">The serializer type to activate.</typeparam>
            <returns>The configured type configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.TypeSerializationRegistrationContext`1.Of(System.Type)">
            <summary>
            Used to activate the specified type and register it as this type's serializer.  Doing so will allow you to design your serializer to import dependencies into its constructor.
            </summary>
            <returns>The configured type configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.TypeSerializationRegistrationContext`1.ByCalling(System.Action{ExtendedXmlSerializer.ContentModel.Format.IFormatWriter,`0},System.Func{ExtendedXmlSerializer.ContentModel.Format.IFormatReader,`0})">
            <summary>
            Registers a new serializer with the provided delegates.
            </summary>
            <param name="serialize">The delegate to call when serializing an instance of the configured type.</param>
            <param name="deserialize">The delegate to call when deserializing an instance of the configured type.</param>
            <returns>The configured type configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.TypeSerializationRegistrationContext`1.Using(ExtendedXmlSerializer.ContentModel.ISerializer{`0})">
            <summary>
            Provides an instance of a serializer to register as this type's serializer.
            </summary>
            <param name="serializer">The serializer to use to serialize/deserialize instances of this type.</param>
            <returns>The configured type configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.TypeSerializationRegistrationContext`1.Using(ExtendedXmlSerializer.ContentModel.ISerializer)">
            <summary>
            Provides an instance of a serializer to register as this type's serializer.
            </summary>
            <param name="serializer">The serializer to use to serialize/deserialize instances of this type.</param>
            <returns>The configured type configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.TypeSerializationRegistrationContext`1.None">
            <summary>
            Clears any serializer that is registered with this type.  This will result in this type using the default
            serialization/deserialization mechanisms of the root serializer for instances of this type.
            </summary>
            <returns>The configuration type configuration.</returns>
        </member>
        <member name="T:ExtendedXmlSerializer.Configuration.TypeSerializerComposerRegistrationContext`1">
            <summary>
            Provides a context for registering content composers for a particular type.
            </summary>
            <typeparam name="T">The type under configuration.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.TypeSerializerComposerRegistrationContext`1.#ctor(ExtendedXmlSerializer.Configuration.ITypeConfiguration{`0})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.TypeSerializerComposerRegistrationContext`1.Of``1">
            <summary>
            Registers a content serializer composer of the specified type.
            </summary>
            <typeparam name="TComposer">The type of the content composer to register.</typeparam>
            <returns>The configured type configuration.</returns>
            <seealso href="https://github.com/ExtendedXmlSerializer/home/issues/264#issuecomment-531491807"/>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.TypeSerializerComposerRegistrationContext`1.Of(System.Type)">
            <summary>
            Registers a content serializer composer of the specified type.
            </summary>
            <param name="composerType">The type that implements <see cref="T:ExtendedXmlSerializer.ExtensionModel.Content.ISerializerComposer"/> of the content composer to
            register.</param>
            <returns>The configured type configuration.</returns>
            <seealso href="https://github.com/ExtendedXmlSerializer/home/issues/264#issuecomment-531491807"/>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.TypeSerializerComposerRegistrationContext`1.ByCalling(System.Func{ExtendedXmlSerializer.ContentModel.ISerializer{`0},ExtendedXmlSerializer.ContentModel.ISerializer{`0}})">
            <summary>
            Used to alter a serializer whenever one is created for a specific type.  This allows the scenario of decorating
            a serializer to override or monitor serialization and/or deserialization.
            </summary>
            <param name="compose">The delegate that defines how to create a content serializer.</param>
            <returns>The configured type configuration.</returns>
            <seealso href="https://github.com/ExtendedXmlSerializer/home/issues/264#issuecomment-531491807"/>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.TypeSerializerComposerRegistrationContext`1.ByCalling(System.Func{ExtendedXmlSerializer.ContentModel.ISerializer,ExtendedXmlSerializer.ContentModel.ISerializer})">
            <summary>
            Used to alter a serializer whenever one is created for a specific type.  This allows the scenario of decorating
            a serializer to override or monitor serialization and/or deserialization.  This override accepts a generalized
            serializer delegate.
            </summary>
            <param name="compose">The delegate that defines how to create a content serializer.</param>
            <returns>The configured type configuration.</returns>
            <seealso href="https://github.com/ExtendedXmlSerializer/home/issues/264#issuecomment-531491807"/>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.TypeSerializerComposerRegistrationContext`1.Using(ExtendedXmlSerializer.ExtensionModel.Content.ISerializerComposer)">
            <summary>
            Used to alter a serializer whenever one is created for a specific type.  This allows the scenario of decorating a
            serializer to override or monitor serialization and/or deserialization.  This override accepts an
            <see cref="T:ExtendedXmlSerializer.ExtensionModel.Content.ISerializerComposer"/> that performs the alteration on the created serializer.
            </summary>
            <param name="composer">The serializer composer to register.</param>
            <returns>The configured type configuration.</returns>
            <seealso href="https://github.com/ExtendedXmlSerializer/home/issues/264#issuecomment-531491807"/>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.TypeSerializerComposerRegistrationContext`1.None">
            <summary>
            Clears any registered content serializer composers for the type under configuration.
            </summary>
            <returns>The configured type configuration.</returns>
            <seealso href="https://github.com/ExtendedXmlSerializer/home/issues/264#issuecomment-531491807"/>
        </member>
        <member name="T:ExtendedXmlSerializer.Configuration.UnknownContentContext">
            <summary>
            Establishes a configuration context that allows operations to be performed against a provided configuration
            container.  These operations configure the serializer(s) created by the container so that they handle unknown
            content -- content that isn't recognized in the deserialized document -- in the configured manner.
            </summary>
            <seealso href="https://github.com/ExtendedXmlSerializer/home/issues/271" />
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.UnknownContentContext.#ctor(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="container">The configuration container under configuration.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.UnknownContentContext.Continue">
            <summary>
            Configures created serializers to continue reading if unknown content is encountered.
            </summary>
            <returns>The configured configuration container.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.UnknownContentContext.Throw">
            <summary>
            Configures created serializers to throw upon encountering unknown content.
            </summary>
            <returns>The configured configuration container.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.Configuration.UnknownContentContext.Call(System.Action{ExtendedXmlSerializer.ContentModel.Format.IFormatReader})">
            <summary>
            Configures created serializers to call the provided delegate upon encountering unknown content.
            </summary>
            <param name="callback">The delegate to invoke when unknown content is encountered.</param>
            <returns>The configured configuration container.</returns>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Content.ContentSerializerAttribute">
            <summary>
            Used to configure a serializer for a type member.
            </summary>
            <seealso href="https://github.com/ExtendedXmlSerializer/home/issues/150"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.Content.ContentSerializerAttribute.#ctor(System.Type)">
            <summary>
            Creates an instance.
            </summary>
            <param name="serializerType">The serializer type.  Must implement <see cref="T:ExtendedXmlSerializer.ContentModel.ISerializer`1"/> or
            <see cref="T:ExtendedXmlSerializer.ContentModel.ISerializer"/></param>
        </member>
        <member name="P:ExtendedXmlSerializer.ContentModel.Content.ContentSerializerAttribute.SerializerType">
            <summary>
            This object's serializer type.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Content.IContentReaders">
            <summary>
            Used by internal infrastructure to create a new content reader from a provided delegate.  Not intended to be used
            for external consumers.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Content.IContents">
            <summary>
            Root-level component that selects a serializer for handling inner-content when provided a type.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Content.IContentWriters">
            <summary>
            Used by internal infrastructure to create a new content writer from a provided delegate.  Not intended to be used
            for external consumers.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Content.IElement">
            <summary>
            Root-level component that, when provided a type, will select a writer used to emit an element tag along with any
            necessary namespace information or other attributes necessary to support it.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Content.IInnerContent">
            <summary>
            Used during deserialization to enumerate any inner content an element might have.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Content.ISerializers">
            <summary>
            A root-level component that will locate and select a serializer when given a provided type.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Content.VerbatimAttribute">
            <summary>
            Configures a type member to wrap its contents in a CDATA container.
            </summary>
            <seealso href="https://github.com/ExtendedXmlSerializer/home/issues/150"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.Content.VerbatimAttribute.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Conversion.Converter`1">
            <summary>
            A delegate-based converter used as a convenience for extension authors.
            </summary>
            <typeparam name="T">The type to convert.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.Conversion.Converter`1.#ctor(System.Func{System.String,`0},System.Func{`0,System.String})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="deserialize">The deserialization delegate used to create the instance from the provided text.</param>
            <param name="serialize">The serialization delegate used to create the text form of the provided instance.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.Conversion.Converter`1.#ctor(ExtendedXmlSerializer.Core.Specifications.ISpecification{System.Reflection.TypeInfo},System.Func{System.String,`0},System.Func{`0,System.String})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="specification">The specification that determines whether the created converter handles the candidate type.</param>
            <param name="deserialize">The deserialization delegate used to create the instance from the provided text.</param>
            <param name="serialize">The serialization delegate used to create the text form of the provided instance.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.Conversion.Converter`1.Parse(System.String)">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.Conversion.Converter`1.Format(`0)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Conversion.ConverterBase`1">
            <summary>
            Base converter used as a convenience for extension authors.
            </summary>
            <typeparam name="T">The type to convert.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.Conversion.ConverterBase`1.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.Conversion.ConverterBase`1.#ctor(ExtendedXmlSerializer.Core.Specifications.ISpecification{System.Reflection.TypeInfo})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="specification">The specification that determines whether the created converter handles the candidate
            type.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.Conversion.ConverterBase`1.Parse(System.String)">
            <summary>
            Used to parse the provided text into a new instance of the converter type.
            </summary>
            <param name="data">The text from which to create a new instance.</param>
            <returns>An instance created from the provided text.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.Conversion.ConverterBase`1.Format(`0)">
            <summary>
            Used to format the provided instance into its text representation.
            </summary>
            <param name="instance">The instance to convert into a text string.</param>
            <returns>The string representation of the provided instance.</returns>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Conversion.DateTimeConverter">
            <summary>
            A converter for handling <see cref="T:System.DateTime"/> values in line with how classical serialization handles them.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ContentModel.Conversion.DateTimeConverter.Local">
            <summary>
            A local variant of this converter.  This is called with <see cref="F:System.Xml.XmlDateTimeSerializationMode.Local"/>.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ContentModel.Conversion.DateTimeConverter.Default">
            <summary>
            The default instance of this converter.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.Conversion.DateTimeConverter.#ctor(System.Xml.XmlDateTimeSerializationMode)">
            <summary>
            Creates a new instance with the provided mode.
            </summary>
            <param name="mode">The mode used to handle conversion for provided DateTime instances.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.Conversion.DateTimeConverter.Parse(System.String)">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.Conversion.DateTimeConverter.Format(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Conversion.IConvert`1">
            <summary>
            Core converter used for converting values of the provided type to and from its text equivalent.
            </summary>
            <typeparam name="T">The type to convert.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.Conversion.IConvert`1.Parse(System.String)">
            <summary>
            Converts the provided text into an instance of the configured convert type.
            </summary>
            <param name="data">The text string to convert into an instance.</param>
            <returns>The instance created from the provided text.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.Conversion.IConvert`1.Format(`0)">
            <summary>
            Converts the provided instance into its text equivalent.
            </summary>
            <param name="instance">The instance to convert into text.</param>
            <returns>The text that represents the provided instance.</returns>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Conversion.IConverter">
            <summary>
            Root-level component that is used to convert the configured type to and from string text.  This is a generalized version of <see cref="T:ExtendedXmlSerializer.ContentModel.Conversion.IConverter`1"/>
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Conversion.IConverter`1">
            <summary>
            Root-level component that is used to convert the configured type to and from string text.  This component builds on
            the <see cref="T:ExtendedXmlSerializer.ContentModel.Conversion.IConvert`1"/> class to provide a specification to let the serializer know it can (or cannot) handle
            a provided type during serialization selection.
            </summary>
            <typeparam name="T">The instance type to convert.</typeparam>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Defaults">
            <summary>
            Intended to be a container of commonly-used or shared values used throughout the containing namespace of this class.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ContentModel.Defaults.FrameworkType">
            <summary>
            Convenience property used to store the root object as a framework type.  Used for namespace resolution.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ContentModel.Defaults.Identifier">
            <summary>
            Identifier used to identify framework components used in this assembly.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Format.IFormat">
            <summary>
            Base container that holds identities and the native root objects (e.g. <see cref="T:System.Xml.XmlReader"/>, or <see cref="T:System.Xml.XmlWriter"/>) during deserialization or serialization.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Format.IFormatReader">
            <summary>
            Root-level reader object used during deserialization.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.Format.IFormatReader.Content">
            <summary>
            Gets the content found within the current xml document element being processed.
            </summary>
            <returns>Text (if any) representing the current content.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.Format.IFormatReader.Set">
            <summary>
            Used to set the current reader so that it is located on content and not within attribute data.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Format.IFormatReaders">
            <summary>
            For extension authors.  Specialized selector to retrieve an <see cref="T:ExtendedXmlSerializer.ContentModel.Format.IFormatReader"/> for each deserialization operation.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Format.IFormatWriter">
            <summary>
            Root-level writer object used during serialization.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.Format.IFormatWriter.Start(ExtendedXmlSerializer.ContentModel.Identification.IIdentity)">
            <summary>
            Emits the provided identity out to the destination stream.
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.Format.IFormatWriter.EndCurrent">
            <summary>
            Ends the current element.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.Format.IFormatWriter.Content(ExtendedXmlSerializer.ContentModel.Identification.IIdentity,System.String)">
            <summary>
            Emits an attribute.
            </summary>
            <param name="identity">Identity of the attribute.</param>
            <param name="content">Content of the property.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.Format.IFormatWriter.Content(System.String)">
            <summary>
            Emits content within an element.
            </summary>
            <param name="content">The content</param>
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.Format.IFormatWriter.Verbatim(System.String)">
            <summary>
            Emits content and marks it as verbatim, by use of a CDATA container.
            </summary>
            <param name="content">The content to emit.</param>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Format.IFormatWriters">
            <summary>
            For extension authors.  Specialized selector to retrieve an <see cref="T:ExtendedXmlSerializer.ContentModel.Format.IFormatWriter"/> for each serialization operation.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Identification.IdentityFormatter">
            <summary>
            Formats a provided identity into its text equivalent.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ContentModel.Identification.IdentityFormatter.Default">
            <summary>
            The default instance.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Identification.IdentityFormatter`1">
            <summary>
            Formats a provided identity into its text equivalent.
            </summary>
            <typeparam name="T">The identity type.</typeparam>
        </member>
        <member name="P:ExtendedXmlSerializer.ContentModel.Identification.IdentityFormatter`1.Default">
            <summary>
            The default instance.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.Identification.IdentityFormatter`1.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.Identification.IdentityFormatter`1.Get(`0)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Identification.IIdentity">
            <summary>
            Root-level component that marks the identity of an object.  An identity has a namespace and name.  Used together these produce a unique identity that is used to identify objects during serialization and deserialization.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ContentModel.Identification.IIdentity.Identifier">
            <summary>
            The identifier for the identity, usually a namespace or URI.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ContentModel.Identification.IIdentity.Name">
            <summary>
            The identity's name.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Identification.IIdentityStore">
            <summary>
            Used to store identities so that they are unique, and retrieve them during serialization and deserialization.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.Identification.IIdentityStore.Get(System.String,System.String)">
            <summary>
            Gets the identity located with the provided input.
            </summary>
            <param name="name">Name of the identity.</param>
            <param name="identifier">Namespace of the identity.</param>
            <returns></returns>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.IReader">
            <summary>
            A generalized implementation of <see cref="T:ExtendedXmlSerializer.ContentModel.IReader`1"/>
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.IReader`1">
            <summary>
            Used during deserialization to materialize an object of the given type by the provided format reader.
            </summary>
            <typeparam name="T">The type to materialize.</typeparam>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.IRuntimeSerialization">
            <summary>
            A specialized <see cref="T:ExtendedXmlSerializer.ContentModel.Content.IContents"/> that is used during runtime when no serializer can be located for a provided type.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.IRuntimeSerializationExceptionMessage">
            <summary>
            Used during runtime serialization to retrieve the message displayed when an exception is encountered during deserialization.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.ISerializer">
            <summary>
            A generalized implementation of <see cref="T:ExtendedXmlSerializer.ContentModel.ISerializer`1"/>
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.ISerializer`1">
            <summary>
            A root-level object that combines the <see cref="T:ExtendedXmlSerializer.ContentModel.IReader`1"/> and <see cref="T:ExtendedXmlSerializer.ContentModel.IWriter`1"/> for deserialization and serialization, respectively.
            </summary>
            <typeparam name="T">The subject type to serialize and deserialize.</typeparam>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.IWriter">
            <summary>
            A generalized implementation of <see cref="T:ExtendedXmlSerializer.ContentModel.IWriter`1"/>.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.IWriter`1">
            <summary>
            Used during serialization to emit the provided instance (and its contents, if necessary) to the provided writer.
            </summary>
            <typeparam name="T">The subject to emit.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.IWriter`1.Write(ExtendedXmlSerializer.ContentModel.Format.IFormatWriter,`0)">
            <summary>
            Emits the instance into the provided writer.
            </summary>
            <param name="writer">The writer that represents the destination.</param>
            <param name="instance">The instance to emit.</param>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Members.IAllowedMemberValues">
            <summary>
            A selector that is used to provide a specification for a member that will determine if it will emit or not.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Members.IAllowedValueSpecification">
            <summary>
            A specific specification implementation that determines if a value should be emitted.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Members.IAttributeSpecification">
            <summary>
            A specification that determines if a provided value should emit as an attribute or content.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Members.IMember">
            <summary>
            Represents a member, which could be a field or property.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ContentModel.Members.IMember.Metadata">
            <summary>
            The backing metadata for the member.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ContentModel.Members.IMember.MemberType">
            <summary>
            The value type of the member.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ContentModel.Members.IMember.IsWritable">
            <summary>
            Specifies if the member can be written (true) or if it's read-only (false).
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ContentModel.Members.IMember.Order">
            <summary>
            The order value of the member, used during serialization to appropriately order this member with other members to
            emit in a particular order.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Members.IMemberAccess">
            <summary>
            Used during serialization and deserialization to get and set values, respectively.  Also used to determine if a
            member should be emitted.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ContentModel.Members.IMemberAccess.Instance">
            <summary>
            Used during writing to determine if the value should be emitted based on its containing instance value.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.Members.IMemberAccess.Get(System.Object)">
            <summary>
            Gets the member value based on the provided instance.
            </summary>
            <param name="instance">The containing instance of the member.</param>
            <returns></returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.Members.IMemberAccess.Assign(System.Object,System.Object)">
            <summary>
            Assigns the provided value based on the provided containing instance.
            </summary>
            <param name="instance">The containing instance that contains the member.</param>
            <param name="value">The value to assign the member.</param>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Members.IMemberSerialization">
            <summary>
            Used to contain serializers for a particular member.  Used during runtime purposes by providing the value of a
            member, as well as a general store to retrieve a member serializer based on member name.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Members.IMemberSerializations">
            <summary>
            Used to retrieve a member serialization component from a provided type.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Members.IMemberSerializer">
            <summary>
            A member-specific serializer that provides additional member-specific functionality and information.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ContentModel.Members.IMemberSerializer.Profile">
            <summary>
            The member profile associated with this serializer.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ContentModel.Members.IMemberSerializer.Access">
            <summary>
            Member access for querying a value for serialization, as well as setting/reading values.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Members.IMetadataSpecification">
            <summary>
            A specific implementation marker that is used to determine whether or not to select and process a type's member.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Members.INames">
            <summary>
            Used to select a name from a provided member metadata.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Members.MetadataSpecification">
            <summary>
            Baseline decorated metadata specification for convenience.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.Members.MetadataSpecification.#ctor(ExtendedXmlSerializer.Core.Specifications.ISpecification{System.Reflection.PropertyInfo},ExtendedXmlSerializer.Core.Specifications.ISpecification{System.Reflection.FieldInfo})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="property">The specification to use for properties.</param>
            <param name="field">The specification to use for fields.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.Members.MetadataSpecification.IsSatisfiedBy(System.Reflection.PropertyInfo)">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.Members.MetadataSpecification.IsSatisfiedBy(System.Reflection.FieldInfo)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Reflection.INames">
            <summary>
            A type-based version of <see cref="T:ExtendedXmlSerializer.ContentModel.Reflection.INames`1"/>.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Reflection.INames`1">
            <summary>
            A component that resolves a string when providing the metadata of a member.
            </summary>
            <typeparam name="T">The metadata type.</typeparam>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Reflection.IReflectionParser">
            <summary>
            Used to parse text into a reflection member.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.Reflection.ITypes">
            <summary>
            Used to resolve a type from a provided identity.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ContentModel.RuntimeSerializers">
            <summary>
            A specialized implementation of <see cref="T:ExtendedXmlSerializer.ContentModel.Content.ISerializers"/> for runtime selection of a serializer when no other
            serializers can be located.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.RuntimeSerializers.#ctor(ExtendedXmlSerializer.ContentModel.Content.ISerializers)">
            <summary>
            Creates an instance.
            </summary>
            <param name="serializers">The serializer selector to decorate.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.RuntimeSerializers.#ctor(ExtendedXmlSerializer.Core.Specifications.ISpecification{System.Reflection.TypeInfo},ExtendedXmlSerializer.ContentModel.Content.ISerializers)">
            <summary>
            Creates an instance.
            </summary>
            <param name="specification">The specification to determine whether to use the provided serializer selector or this
            instance.</param>
            <param name="serializers">The serializer selector to decorate.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.ContentModel.RuntimeSerializers.Get(System.Reflection.TypeInfo)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.Core.CompositeCommand`1">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.CompositeCommand`1.#ctor(ExtendedXmlSerializer.Core.ICommand{`0}[])">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.CompositeCommand`1.#ctor(System.Collections.Immutable.ImmutableArray{ExtendedXmlSerializer.Core.ICommand{`0}})">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.CompositeCommand`1.Execute(`0)">
            <exclude />
        </member>
        <member name="T:ExtendedXmlSerializer.Core.ConditionMonitorState">
            <exclude />
        </member>
        <member name="F:ExtendedXmlSerializer.Core.ConditionMonitorState.None">
            <exclude />
        </member>
        <member name="F:ExtendedXmlSerializer.Core.ConditionMonitorState.Applying">
            <exclude />
        </member>
        <member name="F:ExtendedXmlSerializer.Core.ConditionMonitorState.Applied">
            <exclude />
        </member>
        <member name="T:ExtendedXmlSerializer.Core.ICommand`1">
            <summary>
            A parameterized command that performs operations against the provided parameter.
            </summary>
            <typeparam name="T">The parameter type.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.Core.ICommand`1.Execute(`0)">
            <summary>
            Executes an operation against the provided parameter.
            </summary>
            <param name="parameter">The input parameter.</param>
        </member>
        <member name="T:ExtendedXmlSerializer.Core.ISortAware">
            <exclude />
        </member>
        <member name="P:ExtendedXmlSerializer.Core.ISortAware.Sort">
            <exclude />
        </member>
        <member name="T:ExtendedXmlSerializer.Core.ITypedSortOrder">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.Core.KeyedByTypeCollection`1">
            <summary>Provides a collection whose items are types that serve as keys.</summary>
            <typeparam name="TItem">The item types contained in the collection that also serve as the keys for the collection.
            </typeparam>
            <seealso href="https://msdn.microsoft.com/en-us/library/ms404549%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396"/>
        </member>
        <member name="M:ExtendedXmlSerializer.Core.KeyedByTypeCollection`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.KeyedByTypeCollection`1" /> class.  </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.Core.KeyedByTypeCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.KeyedByTypeCollection`1" /> class for a specified enumeration of objects.</summary>
            <param name="items">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> of generic type <see cref="T:System.Object" /> used to initialize the collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="items" /> is null.</exception>
        </member>
        <member name="M:ExtendedXmlSerializer.Core.KeyedByTypeCollection`1.Remove``1(``0)">
            <summary>Removes an object of a specified type from the collection.</summary>
            <returns>The object removed from the collection.</returns>
            <typeparam name="T">The type of item in the collection to remove.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.Core.KeyedByTypeCollection`1.AddOrReplace``1(``0)">
            <summary>
            Adds or replaces the given element.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="item">The item to add or replace.</param>
            <returns>The containing collection.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.Core.KeyedByTypeCollection`1.RemoveAll``1">
            <summary>Removes all of the elements of a specified type from the collection.</summary>
            <returns>The <see cref="T:System.Collections.ObjectModel.Collection`1" /> that contains the objects of the referenced type from the original collection.</returns>
            <typeparam name="T">The referenced type of item in the collection to remove.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.Core.KeyedByTypeCollection`1.GetKeyForItem(`0)">
            <summary>Gets the type of an item contained in the collection.</summary>
            <returns>The type of the specified <paramref name="item" /> in the collection.</returns>
            <param name="item">The item in the collection whose type is to be retrieved.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.</exception>
        </member>
        <member name="M:ExtendedXmlSerializer.Core.KeyedByTypeCollection`1.InsertItem(System.Int32,`0)">
            <summary>Inserts an element into the collection at a specific location.</summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted. </param>
            <param name="item">The object to insert into the collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.</exception>
        </member>
        <member name="M:ExtendedXmlSerializer.Core.KeyedByTypeCollection`1.SetItem(System.Int32,`0)">
            <summary>Replaces the item at the specified index with a new object.</summary>
            <param name="index">The zero-based index of the <paramref name="item" /> to be replaced.</param>
            <param name="item">The object to add to the collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="item" /> is null.</exception>
        </member>
        <member name="T:ExtendedXmlSerializer.Core.ObjectIdGenerator">
            <summary>
            Attribution: https://msdn.microsoft.com/en-us/library/system.runtime.serialization.objectmanager(v=vs.110).aspx
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.Core.ObjectIdGenerator.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.ObjectIDGenerator" /> class.</summary>
        </member>
        <member name="M:ExtendedXmlSerializer.Core.ObjectIdGenerator.For(System.Object)">
            <summary>Returns the ID for the specified object, generating a new ID if the specified object has not already been identified by the <see cref="T:System.Runtime.Serialization.ObjectIDGenerator" />.</summary>
            <returns>The object's identity context, which can be used for serialization. FirstEncounter is set to true if this is the first time the object has been identified; otherwise, it is set to false.</returns>
            <param name="obj">The object you want an ID for. </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is null. </exception>
        </member>
        <member name="T:ExtendedXmlSerializer.Core.ObjectWalkerBase`2">
            <summary>
            Attribution: https://msdn.microsoft.com/en-us/library/system.runtime.serialization.objectmanager(v=vs.110).aspx
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.Core.Parsing.IParser`1">
            <summary>
            Selector that creates an instance of the specified type based on the provided text string.
            </summary>
            <typeparam name="T">The type to create.</typeparam>
        </member>
        <member name="T:ExtendedXmlSerializer.Core.Sources.CacheBase`2">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.CacheBase`2.#ctor">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.CacheBase`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.CacheBase`2.#ctor(System.Collections.Concurrent.ConcurrentDictionary{`0,`1})">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.CacheBase`2.IsSatisfiedBy(`0)">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.CacheBase`2.Create(`0)">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.CacheBase`2.Get(`0)">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.CacheBase`2.Assign(`0,`1)">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.CacheBase`2.Remove(`0)">
            <exclude />
        </member>
        <member name="T:ExtendedXmlSerializer.Core.Sources.CompositeAlteration`1">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.CompositeAlteration`1.#ctor(System.Collections.Generic.IEnumerable{ExtendedXmlSerializer.Core.Sources.IAlteration{`0}})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="alterations"></param>
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.CompositeAlteration`1.Get(`0)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.Core.Sources.ConditionalSource`2">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.ConditionalSource`2.#ctor(ExtendedXmlSerializer.Core.Specifications.ISpecification{`0},ExtendedXmlSerializer.Core.Sources.IParameterizedSource{`0,`1},ExtendedXmlSerializer.Core.Sources.IParameterizedSource{`0,`1})">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.ConditionalSource`2.#ctor(ExtendedXmlSerializer.Core.Specifications.ISpecification{`0},ExtendedXmlSerializer.Core.Specifications.ISpecification{`1},ExtendedXmlSerializer.Core.Sources.IParameterizedSource{`0,`1},ExtendedXmlSerializer.Core.Sources.IParameterizedSource{`0,`1})">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.ConditionalSource`2.#ctor(System.Func{`0,System.Boolean},System.Func{`1,System.Boolean},System.Func{`0,`1})">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.ConditionalSource`2.#ctor(System.Func{`0,System.Boolean},System.Func{`1,System.Boolean},System.Func{`0,`1},System.Func{`0,`1})">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.ConditionalSource`2.Get(`0)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.Core.Sources.FixedInstanceSource`2">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.FixedInstanceSource`2.#ctor(`1)">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.FixedInstanceSource`2.Get(`0)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.Core.Sources.FixedInstanceSource`1">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.FixedInstanceSource`1.#ctor(`0)">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.FixedInstanceSource`1.Get">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.Core.Sources.IAlteration`1">
            <summary>
            A specialized selection that accepts and returns an instance of the same type.
            </summary>
            <typeparam name="T">The type instance to alter.</typeparam>
        </member>
        <member name="T:ExtendedXmlSerializer.Core.Sources.IAssignable`2">
            <summary>
            A command-based interface that accepts a key and value, usually to pair the two with a store of some sort.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.IAssignable`2.Assign(`0,`1)">
            <summary>
            Assigns a value with the associated key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ExtendedXmlSerializer.Core.Sources.IFormatter`1">
            <summary>
            A selector that derives a text string representation from the provided instance.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
        </member>
        <member name="T:ExtendedXmlSerializer.Core.Sources.IParameterizedSource`2">
            <summary>
            A general purpose selection component that accepts a value and returns a value.
            </summary>
            <typeparam name="TParameter">The type to accept.</typeparam>
            <typeparam name="TResult">The return type.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.IParameterizedSource`2.Get(`0)">
            <summary>
            Performs the selection.
            </summary>
            <param name="parameter">The parameter to accept.</param>
            <returns>A value of the return type.</returns>
        </member>
        <member name="T:ExtendedXmlSerializer.Core.Sources.ISource`1">
            <summary>
            A general purpose interface that contains (or resolves) a value of an instance of the given type.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.ISource`1.Get">
            <summary>
            Retrieves the value within this container object.
            </summary>
            <returns>The resulting instance.</returns>
        </member>
        <member name="T:ExtendedXmlSerializer.Core.Sources.ISpecificationSource`2">
            <summary>
            A selector paired with a specification.
            </summary>
            <typeparam name="TParameter">The selector's parameter type.</typeparam>
            <typeparam name="TResult">The selection result type.</typeparam>
        </member>
        <member name="T:ExtendedXmlSerializer.Core.Sources.ITableSource`2">
            <summary>
            A selector with assignment and a specification.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.ITableSource`2.Remove(`0)">
            <summary>
            Removes the value (if any) found with the specified key.
            </summary>
            <param name="key">The key used to query.</param>
            <returns>Result of removal.</returns>
        </member>
        <member name="T:ExtendedXmlSerializer.Core.Sources.Items`1">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.Items`1.#ctor(`0[])">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.Items`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.Items`1.#ctor(System.Collections.Immutable.ImmutableArray{`0})">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.Items`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.Core.Sources.ItemsBase`1">
            <summary>
            Provides a general purpose container to resolve an instance of items.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.ItemsBase`1.Get">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.ItemsBase`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.Core.Sources.ReferenceCache`2">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.ReferenceCache`2.#ctor(System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.ReferenceCache`2.Create(`0)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.Core.Sources.ReferenceCacheBase`2">
            <summary>
            A base object for storing values keyed on reference.
            </summary>
            <typeparam name="TKey">The key reference type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.ReferenceCacheBase`2.#ctor">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.ReferenceCacheBase`2.#ctor(System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="cache"></param>
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.ReferenceCacheBase`2.Create(`0)">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.ReferenceCacheBase`2.Get(`0)">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.ReferenceCacheBase`2.Assign(`0,`1)">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.ReferenceCacheBase`2.IsSatisfiedBy(`0)">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.ReferenceCacheBase`2.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.Core.Sources.Self">
            <summary>
            Convenience class used for accessing internal components.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.Self.Instance``1">
            <summary>
            Returns an alteration that returns the instance that is passed to it.  Used for scenarios where a default value is
            needed where the instance passed in is the instance to return.
            </summary>
            <typeparam name="T">The type to return.</typeparam>
            <returns>An alteration that returns the instance that is passed into it.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.Self.Of``1">
            <summary>
            Returns a delegate that returns the instance that is passed to it.  Used for scenarios where a default value is
            needed where the instance passed in is the instance to return.
            </summary>
            <typeparam name="T">The type to return.</typeparam>
            <returns>A delegate that returns the instance that is passed into it.</returns>
        </member>
        <member name="T:ExtendedXmlSerializer.Core.Sources.SpecificationSource`2">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.SpecificationSource`2.#ctor(ExtendedXmlSerializer.Core.Sources.IParameterizedSource{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.SpecificationSource`2.#ctor(ExtendedXmlSerializer.Core.Specifications.ISpecification{`0},ExtendedXmlSerializer.Core.Sources.IParameterizedSource{`0,`1})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="specification"></param>
            <param name="source"></param>
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.SpecificationSource`2.IsSatisfiedBy(`0)">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.SpecificationSource`2.Get(`0)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.Core.Sources.StructureCacheBase`2">
            <summary>
            A reference-based cache where the value is a struct.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value-type.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.StructureCacheBase`2.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.StructureCacheBase`2.Create(`0)">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.StructureCacheBase`2.Get(`0)">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.StructureCacheBase`2.Assign(`0,`1)">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.StructureCacheBase`2.IsSatisfiedBy(`0)">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.StructureCacheBase`2.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.Core.Sources.TableSource`2">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.TableSource`2.#ctor">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.TableSource`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.TableSource`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.TableSource`2.IsSatisfiedBy(`0)">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.TableSource`2.Get(`0)">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.TableSource`2.Assign(`0,`1)">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Sources.TableSource`2.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.Core.Specifications.AllSpecification`1">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Specifications.AllSpecification`1.#ctor(ExtendedXmlSerializer.Core.Specifications.ISpecification{`0}[])">
            <summary>
            Creates a new instance.
            </summary>
            <param name="specifications"></param>
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Specifications.AllSpecification`1.IsSatisfiedBy(`0)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.Core.Specifications.DecoratedSpecification`1">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Specifications.DecoratedSpecification`1.#ctor(ExtendedXmlSerializer.Core.Specifications.ISpecification{`0})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="specification"></param>
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Specifications.DecoratedSpecification`1.IsSatisfiedBy(`0)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.Core.Specifications.DelegatedSpecification`1">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Specifications.DelegatedSpecification`1.#ctor(System.Func{`0,System.Boolean})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="delegate"></param>
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Specifications.DelegatedSpecification`1.IsSatisfiedBy(`0)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.Core.Specifications.ISpecification`1">
            <summary>
            Resolves a condition based on the provided parameter.
            </summary>
            <typeparam name="T">The parameter type</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.Core.Specifications.ISpecification`1.IsSatisfiedBy(`0)">
            <summary>
            Returns a boolean based on the provided parameter.
            </summary>
            <param name="parameter">The parameter from which to resolve the condition.</param>
            <returns>The condition based on the provided parameter.</returns>
        </member>
        <member name="T:ExtendedXmlSerializer.DecoratedSerializer">
            <summary>
            Convenience class to decorate an existing serializer, usually used for construction.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.DecoratedSerializer.#ctor(ExtendedXmlSerializer.ExtensionModel.Xml.ISerializer)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="serializer">The existing serializer to decorate.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.DecoratedSerializer.Deserialize(System.Xml.XmlReader)">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.DecoratedSerializer.Serialize(System.Xml.XmlWriter,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionMethods">
            <summary>
            General-purpose extension methods.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethods.Return``2(``0,``1)">
            <summary>Convenience method used for fluent-type methods.</summary>
            <typeparam name="T">The type of the calling instance.</typeparam>
            <typeparam name="TOut">The result type.</typeparam>
            <param name="_">Not used.</param>
            <param name="result">The result.</param>
            <returns>TOut.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethods.Apply``1(System.Action{``0},``0)">
            <summary>
            Convenience method to invoke a method and return the parameter.  This is useful for fluent-based configuration
            method calls.
            </summary>
            <typeparam name="T">The parameter type.</typeparam>
            <param name="this">The delegate to call.</param>
            <param name="parameter">The parameter to pass to the delegate and return.</param>
            <returns>The provided parameter.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethods.Apply``1(ExtendedXmlSerializer.Core.ICommand{``0},``0)">
            <summary>
            Convenience method to invoke a command and return the parameter.  This is useful for fluent-based configuration
            method calls.
            </summary>
            <typeparam name="T">The parameter type.</typeparam>
            <param name="this">The command to call.</param>
            <param name="parameter">The parameter to pass to the command and return.</param>
            <returns>The provided parameter.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethods.Apply``2(ExtendedXmlSerializer.Core.Sources.IAssignable{``0,``1},``0,``1)">
            <summary>
            Convenience method to pass values to an assignable command, and return the command.  This is useful for
            fluent-based configuration method calls.
            </summary>
            <typeparam name="TKey">The key type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
            <param name="this">The assignable to command to invoke.</param>
            <param name="key">The key to pass in.</param>
            <param name="value">The value to pass in.</param>
            <returns>The assignable command.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethods.Apply``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            Convenience method to add an element to a collection, and return the element.  This is useful for
            fluent-based configuration method calls.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="this">The collection to add an element to.</param>
            <param name="parameter">The element to add.</param>
            <returns>The element.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethods.PropertyOrField(System.Linq.Expressions.UnaryExpression,System.Type,System.String)">
            <summary>
            Convenience method that queries an expression to resolve a property or field expression.
            </summary>
            <param name="expression">The expression to query.</param>
            <param name="type">The member containing type.</param>
            <param name="name">The member name.</param>
            <returns>The resolved member expression.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethods.Only``1(System.Collections.Immutable.ImmutableArray{``0})">
            <summary>
            Gets the only element if it exists, otherwise returns the type's default.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="this">The set to query.</param>
            <returns>The only element, if it exists.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethods.Only``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the only element if it exists, otherwise returns the type's default.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="this">The set to query.</param>
            <returns>The only element, if it exists.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethods.To``1(System.Object)">
            <summary>
            Convenience method to case object to requested type.  Easier for fluent expressions.
            </summary>
            <param name="this">The object to cast.</param>
            <typeparam name="T">The requested type.</typeparam>
            <returns>An instance of the request type if it can be cast.  Otherwise, the type's default is returned.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethods.AsValid``1(System.Object,System.String)">
            <summary>
            Convenience method to cast instance to the requested type.  If it cannot, an <see cref="T:System.InvalidOperationException"/> is thrown.
            </summary>
            <typeparam name="T">The requested type</typeparam>
            <param name="this">The instance to cast.</param>
            <param name="message">The message to display if an exception is thrown.</param>
            <returns>The casted, validated instance.</returns>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionMethodsForAlteration">
            <summary>
            Extension methods that assist or enable functionality for altering content produced (or read in) by the container,
            its types, and/or its type's members.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForAlteration.Alter``1(ExtendedXmlSerializer.Configuration.ITypeConfiguration{``0},System.Func{``0,``0})">
            <summary>
            Used to alter an instance of the configured result type whenever it is encountered during the serialization
            process.  This can be used in scenarios where it is desired to know when an instance of a particular type is
            emitted (for logging purposes, etc.) or, more generally, to alter it in some way (scrubbing data, etc)
            before it is written to the external stream.  You can consider this as a value interception of
            the serialization pipeline.
            </summary>
            <typeparam name="T">The type under configuration.</typeparam>
            <param name="this">The type configuration to configure.</param>
            <param name="write">The alteration delegate to invoke during writing.</param>
            <returns>The configured type configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForAlteration.Alter``1(ExtendedXmlSerializer.Configuration.ITypeConfiguration{``0},System.Func{``0,``0},System.Func{``0,``0})">
            <summary>
            Used to alter an instance of the configured result type whenever it is encountered during the serialization or
            deserialization process.  This can be used in scenarios where it is desired to know when an instance of a
            particular type is emitted or read (for logging purposes, etc.) or, more generally, to alter it in some way
            (scrubbing data, etc) before it is written to the external stream or read into memory.  You can consider this as a
            value interception of the serialization/deserialization pipeline.
            </summary>
            <typeparam name="T">The type under configuration.</typeparam>
            <param name="this">The type configuration to configure.</param>
            <param name="read">The alteration delegate to invoke during reading.</param>
            <param name="write">The alteration delegate to invoke during writing.</param>
            <returns>The configured type configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForAlteration.Alter``1(ExtendedXmlSerializer.Configuration.ITypeConfiguration{``0},ExtendedXmlSerializer.Core.Sources.IAlteration{``0},ExtendedXmlSerializer.Core.Sources.IAlteration{``0})">
            <summary>
            Used to alter an instance of the configured result type whenever it is encountered during the serialization or
            deserialization process.  This can be used in scenarios where it is desired to know when an instance of a
            particular type is emitted or read (for logging purposes, etc.) or, more generally, to alter it in some way
            (scrubbing data, etc) before it is written to the external stream or read into memory.  You can consider this as a
            value interception of the serialization/deserialization pipeline.
            </summary>
            <typeparam name="T">The type under configuration.</typeparam>
            <param name="this">The type configuration to configure.</param>
            <param name="read">The alteration to apply during reading.</param>
            <param name="write">The alteration to apply during writing.</param>
            <returns>The configured type configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForAlteration.Alter``2(ExtendedXmlSerializer.Configuration.IMemberConfiguration{``0,``1},System.Func{``1,``1})">
            <summary>
            Used to alter the value of a member whenever it is encountered during the serialization process.  This can be used
            in scenarios where it is desired to know when a the value of a member is emitted (for logging purposes,
            etc.) or, more generally, to alter it in some way (scrubbing data, etc) before it is written to the external
            stream.  You can consider this as a member value interception of the serialization pipeline.
            </summary>
            <typeparam name="T">The containing type under configuration.</typeparam>
            <typeparam name="TMember">The member's value type.</typeparam>
            <param name="this">The member configuration under configuration.</param>
            <param name="write">The alteration delegate to invoke on the member value when it is written.</param>
            <returns>The configured member configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForAlteration.Alter``2(ExtendedXmlSerializer.Configuration.IMemberConfiguration{``0,``1},System.Func{``1,``1},System.Func{``1,``1})">
            <summary>
            Used to alter the value of a member whenever it is encountered during the serialization or deserialization
            process.  This can be used in scenarios where it is desired to know when a the value of a member is emitted or
            read (for logging purposes, etc.) or, more generally, to alter it in some way (scrubbing data, etc) before it is
            written to the external stream or read into memory.  You can consider this as a member value interception of the
            serialization/deserialization pipeline.
            </summary>
            <typeparam name="T">The containing type under configuration.</typeparam>
            <typeparam name="TMember">The member's value type.</typeparam>
            <param name="this">The member configuration under configuration.</param>
            <param name="read">The alteration delegate to invoke on the member value when it is read.</param>
            <param name="write">The alteration delegate to invoke on the member value when it is written.</param>
            <returns>The configured member configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForAlteration.Alter``2(ExtendedXmlSerializer.Configuration.IMemberConfiguration{``0,``1},ExtendedXmlSerializer.Core.Sources.IAlteration{``1},ExtendedXmlSerializer.Core.Sources.IAlteration{``1})">
            <summary>
            Used to alter the value of a member whenever it is encountered during the serialization or deserialization
            process.  This can be used in scenarios where it is desired to know when a the value of a member is emitted or
            read (for logging purposes, etc.) or, more generally, to alter it in some way (scrubbing data, etc) before it is
            written to the external stream or read into memory.  You can consider this as a member value interception of the
            serialization/deserialization pipeline.
            </summary>
            <typeparam name="T">The containing type under configuration.</typeparam>
            <typeparam name="TMember">The member's value type.</typeparam>
            <param name="this">The member configuration under configuration.</param>
            <param name="read">The alteration to apply to the member value when it is read.</param>
            <param name="write">The alteration to apply to the member value when it is written.</param>
            <returns>The configured member configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForAlteration.Alter(ExtendedXmlSerializer.Configuration.IConfigurationContainer,ExtendedXmlSerializer.Core.Sources.IAlteration{ExtendedXmlSerializer.ContentModel.Conversion.IConverter})">
            <summary>
            Provides a way to alter converters when they are accessed by the serializer.  This provides a mechanism to
            decorate converters.  Alterations only occur once per converter per serializer.
            </summary>
            <param name="this">The container to configure.</param>
            <param name="alteration">The alteration to perform on each converter when it is accessed by the serializer.</param>
            <returns>The configured container.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForAlteration.RegisterContentComposition``1(ExtendedXmlSerializer.Configuration.ITypeConfiguration{``0},System.Func{ExtendedXmlSerializer.ContentModel.ISerializer{``0},ExtendedXmlSerializer.ContentModel.ISerializer{``0}})">
            <summary>
            Used to alter a serializer whenever one is created for a specific type.  This allows the scenario of decorating
            a serializer to override or monitor serialization and/or deserialization.
            </summary>
            <typeparam name="T">The type that the serializer processes.</typeparam>
            <param name="this">The type configuration to configure.</param>
            <param name="compose">The delegate used to alterate the created serializer.</param>
            <returns>The configured type configuration.</returns>
            <seealso href="https://github.com/ExtendedXmlSerializer/home/issues/264#issuecomment-531491807"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForAlteration.RegisterContentComposition``1(ExtendedXmlSerializer.Configuration.ITypeConfiguration{``0},System.Func{ExtendedXmlSerializer.ContentModel.ISerializer,ExtendedXmlSerializer.ContentModel.ISerializer})">
            <summary>
            Used to alter a serializer whenever one is created for a specific type.  This allows the scenario of decorating
            a serializer to override or monitor serialization and/or deserialization.  This override accepts a generalized
            serializer delegate.
            </summary>
            <typeparam name="T">The type that the serializer processes.</typeparam>
            <param name="this">The type configuration to configure.</param>
            <param name="compose">The delegate used to alterate the created serializer.</param>
            <returns>The configured type configuration.</returns>
            <seealso href="https://github.com/ExtendedXmlSerializer/home/issues/264#issuecomment-531491807"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForAlteration.RegisterContentComposition``1(ExtendedXmlSerializer.Configuration.ITypeConfiguration{``0},ExtendedXmlSerializer.ExtensionModel.Content.ISerializerComposer)">
            <summary>
            Used to alter a serializer whenever one is created for a specific type.  This allows the scenario of decorating a
            serializer to override or monitor serialization and/or deserialization.  This override accepts an
            <see cref="T:ExtendedXmlSerializer.ExtensionModel.Content.ISerializerComposer"/> that performs the alteration on the created serializer.
            </summary>
            <typeparam name="T">The type that the serializer processes.</typeparam>
            <param name="this">The type configuration to configure.</param>
            <param name="composer">The composer that is used to alter the serializer upon creation.</param>
            <returns>The configured type configuration.</returns>
            <seealso href="https://github.com/ExtendedXmlSerializer/home/issues/264#issuecomment-531491807"/>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionMethodsForAttachedProperties">
            <summary>
            Extension methods that assist or enable functionality found within the extension model namespace for attached
            properties (<see cref="N:ExtendedXmlSerializer.ExtensionModel.AttachedProperties"/>).
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForAttachedProperties.EnableAttachedProperties(ExtendedXmlSerializer.Configuration.IConfigurationContainer,ExtendedXmlSerializer.ExtensionModel.AttachedProperties.IProperty[])">
            <summary>
            Enables attached properties on the container with optional initial properties to register.
            </summary>
            <param name="this">The container to configure.</param>
            <param name="properties">The properties to register with the container.</param>
            <returns>The configured IConfigurationContainer.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForAttachedProperties.EnableAttachedProperties(ExtendedXmlSerializer.Configuration.IConfigurationContainer,System.Collections.Generic.ICollection{ExtendedXmlSerializer.ExtensionModel.AttachedProperties.IProperty})">
            <summary>
            Enables attached properties on the container with the initial properties to register.
            </summary>
            <param name="this">The container to configure.</param>
            <param name="properties">The properties to register with the container.</param>
            <returns>The configured IConfigurationContainer.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForAttachedProperties.AttachedProperty``2(ExtendedXmlSerializer.Configuration.IConfigurationContainer,System.Linq.Expressions.Expression{System.Func{ExtendedXmlSerializer.ExtensionModel.AttachedProperties.Property{``0,``1}}})">
            <summary>
            Registers an attached property by expression.
            </summary>
            <typeparam name="TType">The type of object the attached property targets.</typeparam>
            <typeparam name="TValue">The type of the value the attached property provides.</typeparam>
            <param name="this">The container to configure.</param>
            <param name="property">The expression that resolves to an attached property.</param>
            <returns>The configured IMemberConfiguration that represents the attached property.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForAttachedProperties.Get``2(``0,ExtendedXmlSerializer.ExtensionModel.AttachedProperties.Property{``0,``1})">
            <summary>
            Given an instance, gets the value stored with the attached property.
            </summary>
            <typeparam name="TType">The instance type.</typeparam>
            <typeparam name="TValue">The stored value type.</typeparam>
            <param name="this">The instance to use to retrieve the value.</param>
            <param name="property">The property used to retrieve the value.</param>
            <returns>The value stored with the attached property.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForAttachedProperties.Set``2(``0,ExtendedXmlSerializer.ExtensionModel.AttachedProperties.Property{``0,``1},``1)">
            <summary>
            Given an instance and value, stores a value with the attached property.
            </summary>
            <typeparam name="TType">The instance type.</typeparam>
            <typeparam name="TValue">The stored value type.</typeparam>
            <param name="this">The instance with which to store the value.</param>
            <param name="property">The attached property to store the value.</param>
            <param name="value">The value to store.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForAttachedProperties.EnableAttachedProperties(ExtendedXmlSerializer.Configuration.IConfigurationContainer,System.Collections.Generic.ICollection{ExtendedXmlSerializer.ExtensionModel.AttachedProperties.IProperty},System.Collections.Generic.ICollection{System.Type})">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForAttachedProperties.AttachedProperty``2(ExtendedXmlSerializer.Configuration.IConfigurationContainer,System.Linq.Expressions.Expression{System.Func{ExtendedXmlSerializer.ExtensionModel.AttachedProperties.Property{``0,``1}}},System.Action{ExtendedXmlSerializer.Configuration.IMemberConfiguration{``0,``1}})">
            <summary>
            This method is not used and will be removed in a future release.
            </summary>
            <typeparam name="TType"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="this"></param>
            <param name="property"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionMethodsForClassicSerialization">
            <summary>
            Extension methods that assist or enable functionality found within the extension model namespace for classic
            serialization (<see cref="N:ExtendedXmlSerializer.ExtensionModel.Xml.Classic"/>).
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForClassicSerialization.Context(System.Xml.XmlNameTable)">
            <summary>
            Used to create a <see cref="T:System.Xml.XmlParserContext"/> from an XmlNameTable.
            </summary>
            <param name="this">The XmlNameTable from which to create the context.</param>
            <returns>The context.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForClassicSerialization.Member(System.Xml.Linq.XElement,System.String)">
            <summary>
            Convenience method to retrieve a member element from a provided <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <param name="this">The provided XElement to query.</param>
            <param name="name">The member name used to query the provided XElement.</param>
            <returns>The located XElement</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForClassicSerialization.EnableClassicMode(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            Applies the classic emit behavior (<see cref="P:ExtendedXmlSerializer.Configuration.EmitBehaviors.Classic"/>) and processes lists and dictionaries
            without members.  That is, if your list or dictionary is extended with its own properties and members, they will
            not be serialized nor deserialized if applied in the document.
            </summary>
            <param name="this">The configuration container to configure.</param>
            <returns>The configured configuration container.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForClassicSerialization.EnableClassicSchemaTyping(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            Enables the xsi:type for classic deserialization purposes.  This will be used to resolve types during the
            serialization process if no other type resolution mechanisms are successful in resolving a type.
            </summary>
            <param name="this">The configuration container to configure.</param>
            <returns>The configured configuration container.</returns>
            <seealso href="https://github.com/ExtendedXmlSerializer/home/issues/261"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForClassicSerialization.EnableClassicListNaming(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            Enables `ArrayOfT` and `ListOfT` naming conventions for arrays and lists, respectively.
            </summary>
            <param name="this">The configuration container to configure.</param>
            <returns>The configured configuration container.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForClassicSerialization.InspectingType``1(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            Used to inspect a type for an <see cref="T:System.Xml.Serialization.XmlRootAttribute"/> and if not found, a <see cref="T:System.Xml.Serialization.XmlTypeAttribute"/> to
            establish its identity.  If both are found, the <see cref="T:System.Xml.Serialization.XmlRootAttribute"/> takes precedence, but if any values
            there are empty or null, the <see cref="T:System.Xml.Serialization.XmlTypeAttribute"/> values will be used, instead.  Using such an approach,
            you can use an URI -- either <see cref="P:System.Xml.Serialization.XmlRootAttribute.Namespace"/> or <see cref="P:System.Xml.Serialization.XmlTypeAttribute.Namespace"/>
            -- to specify the type's namespace and the entity's name by using <see cref="P:System.Xml.Serialization.XmlRootAttribute.ElementName"/> or
            <see cref="P:System.Xml.Serialization.XmlTypeAttribute.TypeName"/>) for the that value.  If no name value is found on either, the type's name
            will be used instead.
            </summary>
            <typeparam name="T">The subject type to inspect.</typeparam>
            <param name="this">The configuration container to configure.</param>
            <returns>The configured configuration container.</returns>
            <seealso href="https://github.com/ExtendedXmlSerializer/home/issues/175" />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForClassicSerialization.InspectingTypes(ExtendedXmlSerializer.Configuration.IConfigurationContainer,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Inspects a collection of types to inspect for their identities.  This is done by querying the existence of an
            <see cref="T:System.Xml.Serialization.XmlRootAttribute"/> on each type, and if not found, a <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> to establish its
            identity.  If both are found, the <see cref="T:System.Xml.Serialization.XmlRootAttribute"/> takes precedence, but if any values there are
            empty or null, the <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> values will be used, instead.  Using such an approach, you can
            use an URI -- either <see cref="P:System.Xml.Serialization.XmlRootAttribute.Namespace"/> or <see cref="P:System.Xml.Serialization.XmlTypeAttribute.Namespace" /> -- to
            specify the type's namespace and the entity's name by using <see cref="P:System.Xml.Serialization.XmlRootAttribute.ElementName" /> or
            <see cref="P:System.Xml.Serialization.XmlTypeAttribute.TypeName"/>) for the that value.  If no name value is found on either, the type's name
            will be used instead.
            </summary>
            <param name="this">The configuration container to configure.</param>
            <param name="types">The list of types to inspect.</param>
            <returns>The configured configuration container.</returns>
            <seealso href="https://github.com/ExtendedXmlSerializer/home/issues/175"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForClassicSerialization.EnableXmlText(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            Adds basic support for the <see cref="T:System.Xml.Serialization.XmlTextAttribute" />.  Note that this is not a very robust solution and
            there are deficiencies in the fidelity with the classic serializer's implementation.  Use with care, and make a
            wish. 😆
            </summary>
            <param name="this">The configuration container to configure.</param>
            <returns>The configured configuration container.</returns>
            <seealso href="https://github.com/ExtendedXmlSerializer/home/issues/192"/>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionMethodsForConfiguration">
            <summary>
            Extension methods that assist or enable functionality found within the configuration namespace (
            <see cref="N:ExtendedXmlSerializer.Configuration"/>).
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.Create(ExtendedXmlSerializer.Configuration.IContext)">
            <summary>
            The main event.  Used to create a new serializer from the configured context (usually a <see cref="T:ExtendedXmlSerializer.Configuration.IConfigurationContainer"/>).
            </summary>
            <param name="this">The configured context that creates the serializer.</param>
            <returns>The configured serializer.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.Apply``1(ExtendedXmlSerializer.Configuration.IRootContext)">
            <summary>
            Used to apply a new serializer extension of the provided type.  If an extension already exists in the provided
            context, it is returned.  Otherwise, it will attempt to locate a singleton on the provided type, and if that isn't
            found, activate it by calling its public constructor.
            </summary>
            <typeparam name="T">The serializer extension type to apply.</typeparam>
            <param name="this">The configuration context (usually a configuration container) to locate the provided serializer
            extension type.</param>
            <returns>The configured context with the requested extension applied to it.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.Apply``1(ExtendedXmlSerializer.Configuration.IRootContext,System.Func{``0})">
            <summary>
            Used to apply a new serializer extension of the provided type.  If an extension already exists in the provided
            context, it is returned.  Otherwise, it will use the provided factory to create the serializer and register it
            with the provided context.
            </summary>
            <typeparam name="T">The serializer extension type to apply.</typeparam>
            <param name="this">The configuration context (usually a configuration container) to locate the provided serializer
            extension type.</param>
            <param name="create">The factory used to create the extension of the requested type, if an instance of its type
            does not already exist.</param>
            <returns>The configured context with the requested extension applied to it.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.Add``1(ExtendedXmlSerializer.Configuration.IRootContext)">
            <summary>
            Adds an extension of the provided type to the provided context.  This will be done by attempting to locate a
            singleton on the provided type, and if that isn't found, activate it by calling its public constructor.
            </summary>
            <typeparam name="T">The serializer extension type to locate and add.</typeparam>
            <param name="this">The configuration context (usually a configuration container) with which to add the created
            serializer extension.</param>
            <returns>The created and added extension.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.Add``1(ExtendedXmlSerializer.Configuration.IRootContext,System.Func{``0})">
            <summary>
            Adds an extension to the provided context by invoking the provided factory method and adding it to the context.
            </summary>
            <typeparam name="T">The serializer extension type to create and add.</typeparam>
            <param name="this">The configuration context (usually a configuration container) with which to add the created
            serializer extension.</param>
            <param name="create">The factory used to create the extension of the requested type.</param>
            <returns>The created and added extension.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.With``1(ExtendedXmlSerializer.Configuration.IRootContext)">
            <summary>
            Finds or creates/add the requested serializer extension type.  If an extension of the requested type already
            exists, it is returned.  Otherwise, a new one is created by searching first for a singleton on the requested type,
            and creating a new instance by way of public constructor if not.
            </summary>
            <typeparam name="T">The requested serializer extension type.</typeparam>
            <param name="this">The root context to search for a serializer extension of provided type.</param>
            <returns>The located or created serializer extension.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.With``1(ExtendedXmlSerializer.Configuration.IRootContext,System.Action{``0})">
            <summary>
            Finds or creates/add the requested serializer extension type, and then configures it with the provided action once
            it does.
            </summary>
            <typeparam name="T">The requested serializer extension type.</typeparam>
            <param name="this">The root context to search for a serializer extension of provided type.</param>
            <param name="configure">The configuration action to invoke once the serializer extension has been located.</param>
            <returns>The configured context (usually a configuration container).</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.Extend(ExtendedXmlSerializer.Configuration.IRootContext,ExtendedXmlSerializer.ExtensionModel.ISerializerExtension[])">
            <summary>
            Used to extend a root context (usually a configuration container).  This passes in a collection of extensions to
            add to the context's collection of serializer extensions.
            </summary>
            <param name="this">The root context that contains the target collection of serializer extensions.</param>
            <param name="extensions">The array of extensions to add.</param>
            <returns>The configured context (usually a configuration container).</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.GetType(ExtendedXmlSerializer.Core.Sources.ISource{System.Reflection.TypeInfo})">
            <summary>
            Convenience method for objects that implement several <see cref="T:ExtendedXmlSerializer.Core.Sources.ISource`1"/> to get its type-based contents
            specifically.
            </summary>
            <param name="this">The implementing source.</param>
            <returns>TypeInfo.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.GetMember(ExtendedXmlSerializer.Core.Sources.ISource{System.Reflection.MemberInfo})">
            <summary>
            Convenience method for objects that implement several <see cref="T:ExtendedXmlSerializer.Core.Sources.ISource`1"/> to get its member-based contents
            specifically.
            </summary>
            <param name="this">The implementing source.</param>
            <returns>MemberInfo.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.Configured``1(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            Configures the container with a configuration profile.  A configuration profile is a profile of configurations
            that can be applied to a configuration container.  It is a way of preserving commonly-used configurations and
            applying them quickly to a configuration container.
            </summary>
            <typeparam name="T">The type of the configuration profile.</typeparam>
            <param name="this">The container to configure.</param>
            <returns>The configured container with the configuration profile applied to it.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.Type``1(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            Gets or creates a type configuration from the container.  Type configurations are configurations that deal
            specifically with a particular type and allow you to query its member configurations for further configuration of
            the type's members.
            </summary>
            <typeparam name="T">The requested type.</typeparam>
            <param name="this">The container from which to request the type configuration.</param>
            <returns>The type configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.Type``1(ExtendedXmlSerializer.Configuration.IConfigurationContainer,System.Action{ExtendedXmlSerializer.Configuration.ITypeConfiguration{``0}})">
            <summary>
            Gets or creates a type configuration from the container, and then configures it with the provided action.  Type
            configurations are configurations that deal specifically with a particular type and allow you to query its member
            configurations for further configuration of the type's members.
            </summary>
            <typeparam name="T">The requested type.</typeparam>
            <param name="this">The container from which to request the type configuration.</param>
            <param name="configure">The configuration to perform on the type configuration once it has been retrieved.</param>
            <returns>The configured type configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.GetTypeConfiguration(ExtendedXmlSerializer.Configuration.IContext,System.Type)">
            <summary>
            Gets or creates a type configuration from the container.  Type configurations are configurations that deal
            specifically with a particular type and allow you to query its member configurations for further configuration of
            the type's members.
            </summary>
            <param name="this">The context (usually a configuration containers) from which to request the type configuration.</param>
            <param name="type">The type to retrieve.</param>
            <returns>The type configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.Name``1(ExtendedXmlSerializer.Configuration.ITypeConfiguration{``0},System.String)">
            <summary>
            Applies a name for the type.  This provided name will be used to emit the type when needed during serialization,
            and again when needed during the reading of a deserialization.
            </summary>
            <typeparam name="T">The type under configuration.</typeparam>
            <param name="this">The type configuration to configure.</param>
            <param name="name">The name to apply to the type.</param>
            <returns>The configured type configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.Member``2(ExtendedXmlSerializer.Configuration.ITypeConfiguration{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Get (or create) the member configuration from the type that resolves with the provided expression.
            </summary>
            <typeparam name="T">The type under configuration.</typeparam>
            <typeparam name="TMember">The type of the member's value.</typeparam>
            <param name="this">The type configuration to configure.</param>
            <param name="member">The expression to that resolves to a member of the type under configuration.</param>
            <returns>The requested member configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.Member``2(ExtendedXmlSerializer.Configuration.ITypeConfiguration{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Action{ExtendedXmlSerializer.Configuration.IMemberConfiguration{``0,``1}})">
            <summary>
            Get (or create) the member configuration from the type that resolves with the provided expression, and then
            configures it with the provided action.
            </summary>
            <typeparam name="T">The type under configuration.</typeparam>
            <typeparam name="TMember">The type of the member's value.</typeparam>
            <param name="this">The type configuration to configure.</param>
            <param name="member">The expression to that resolves to a member of the type under configuration.</param>
            <param name="configure">The configuration to perform on the member configuration once retrieved.</param>
            <returns>The configured type configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.MemberBy``1(ExtendedXmlSerializer.Configuration.ITypeConfiguration{``0},System.Reflection.MemberInfo)">
            <summary>
            Get (or create) the member configuration from the type that resolves with the provided member metadata.
            </summary>
            <typeparam name="T">The type under configuration.</typeparam>
            <param name="this">The type configuration to configure.</param>
            <param name="member">The metadata used to query the type.</param>
            <returns>The located member configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.MemberBy``2(ExtendedXmlSerializer.Configuration.ITypeConfiguration{``0},ExtendedXmlSerializer.Configuration.MemberInfo{``1})">
            <summary>
            Get (or create) the member configuration from the type that resolves with the provided strongly-typed member
            metadata.  Strongly-typed member metadata can be created via the use of the <see cref="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.As``1(System.Reflection.MemberInfo)"/> method.
            </summary>
            <typeparam name="T">The type under configuration.</typeparam>
            <typeparam name="TMember">The value type of the member.</typeparam>
            <param name="this">The type configuration to configure.</param>
            <param name="member">The strongly-typed metadata used to query the type.</param>
            <returns>The located member configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.Name``2(ExtendedXmlSerializer.Configuration.IMemberConfiguration{``0,``1},System.String)">
            <summary>
            Applies a name for the member.  This will result in emitting an element name for the member with the provided
            value during serialization, as well as reading the name from XML elements during deserialization.
            </summary>
            <typeparam name="T">The containing type of the member.</typeparam>
            <typeparam name="TMember">The type of the member's value.</typeparam>
            <param name="this">The member configuration to configure.</param>
            <param name="name">The name to assign for the member under configuration.</param>
            <returns>The configured member configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.Order``2(ExtendedXmlSerializer.Configuration.IMemberConfiguration{``0,``1},System.Int32)">
            <summary>
            Sets the order for the given member.  This is used in ordering all elements when they are emitted during serialization.
            </summary>
            <typeparam name="T">The containing type of the member.</typeparam>
            <typeparam name="TMember">The member's value type.</typeparam>
            <param name="this">The member configuration which to order.</param>
            <param name="order">The desired order value for the member.</param>
            <returns>The configured member configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.As``1(System.Reflection.MemberInfo)">
            <summary>
            Convenience method to create a strongly-typed MemberInfo object that can be used to query from a configuration
            container via the <see cref="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.MemberBy``1(ExtendedXmlSerializer.Configuration.ITypeConfiguration{``0},System.Reflection.MemberInfo)"/> method call.
            </summary>
            <typeparam name="T">The value type of the member.</typeparam>
            <param name="this">The member to use as the source.</param>
            <returns>A strongly-typed MemberInfo instance.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.Identity``2(ExtendedXmlSerializer.Configuration.IMemberConfiguration{``0,``1})">
            <summary>
            Flags the provided member configuration as the identity member for the container's references.  Once an identity
            member is established, it is used to emit its unique value and to later read it during deserialization.  The
            unique value is used to keep track of references in a different application and/or domain context from when the
            original serialization occurred.
            </summary>
            <typeparam name="T">The containing type of the member.</typeparam>
            <typeparam name="TMember">The member's value type.</typeparam>
            <param name="this">The member configuration to configure.</param>
            <returns>The configured member configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.AllowedReferenceTypes(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            Retrieves the current "whitelist" of allowed types on a configuration container.  If specified and populated,
            these are the only types that can have
            <see cref="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.EnableReferences(ExtendedXmlSerializer.Configuration.IConfigurationContainer)"/> called on them.  Note
            that if both whitelist and blacklists are populated, the whitelist takes precedence.
            </summary>
            <param name="this">The configuration container to query.</param>
            <returns>The current allowed types that can be reference-enabled.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.IgnoredReferenceTypes(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            Retrieves the current "blacklist" of ignored types on a configuration container.  By default this is the see
            cref="String"/> type. If specified and populated, these are the only types that cannot have
            <see cref="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.EnableReferences(ExtendedXmlSerializer.Configuration.IConfigurationContainer)"/> called on them.  Note that if both whitelist and
            blacklists are populated, the whitelist takes precedence.
            </summary>
            <param name="this">The configuration container to configure.</param>
            <returns>A collection of types that cannot be reference-enabled.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.EnableReferences(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            Enables references on a configuration container, which will create a serializer that supports circular references.
            When the first reference is encountered, it will be emitted. Further occurrences of the same reference will emit
            with a special attribute along with its unique value.  This allows circular references to be serialized and
            subsequently deserialized appropriately and properly.  Note that, by default, if this method is not invoked on a
            configuration container, and a serializer that it creates attempts to serialize an object with circular
            references, an exception is thrown.
            </summary>
            <param name="this">The configuration container to configure.</param>
            <returns>The configured configuration container.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.EnableReferences``2(ExtendedXmlSerializer.Configuration.ITypeConfiguration{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Enables references on a configuration container, which will create a serializer that supports circular references.
            Additionally, this call will register a particular type as allowing references, and establish the member that
            evaluates with the provided expression as the identity member.  Doing so will allow the serializer to keep track
            of references based on the unique values found with the identity member.
            </summary>
            <typeparam name="T">The type under configuration.</typeparam>
            <typeparam name="TMember">The resulting identity member value type.</typeparam>
            <param name="this">The type configuration under configuration.</param>
            <param name="member">The member expression that is intended to resolve as the identity member for the type
            configuration.</param>
            <returns>The configured type configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.EnableDeferredReferences(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            This is an alternative version of enabling references on a configuration container and the subsequent serializers
            that it creates.  It works much like
            <see cref="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.EnableReferences(ExtendedXmlSerializer.Configuration.IConfigurationContainer)"/>, except that it will
            defer emitting the identity references until the last one is encountered.  By contrast,
            <see cref="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.EnableReferences(ExtendedXmlSerializer.Configuration.IConfigurationContainer)"/> emits the identity
            references when it first encounters them, and then a reference back to the identity reference with each subsequent
            encounter.
            </summary>
            <param name="this">The configuration container to configure.</param>
            <returns>The configured configuration container.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.With(System.Collections.Generic.IEnumerable{ExtendedXmlSerializer.ExtensionModel.ISerializerExtension},ExtendedXmlSerializer.ExtensionModel.ISerializerExtension[])">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.EnableReferences(ExtendedXmlSerializer.Configuration.IRootContext)">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.GetTypeConfiguration(ExtendedXmlSerializer.Configuration.IContext,System.Reflection.TypeInfo)">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.ConfigureType``1(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForConfiguration.Member``1(ExtendedXmlSerializer.Configuration.ITypeConfiguration{``0},System.Reflection.MemberInfo)">
            <exclude />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionMethodsForContent">
            <summary>
            Extension methods that assist or enable functionality found within the content model's content namespace (
            <see cref="N:ExtendedXmlSerializer.ContentModel.Content"/>).
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForContent.DecorateContentsWith``1(ExtendedXmlSerializer.ExtensionModel.IServiceRepository)">
            <summary>
            Convenience method for extension authors.  This is used to establish a context to decorate the container's
            <see cref="T:ExtendedXmlSerializer.ContentModel.Content.IContents"/> component.
            </summary>
            <typeparam name="T">The implementation type, of type <see cref="T:ExtendedXmlSerializer.ContentModel.Content.IContents"/>.</typeparam>
            <param name="this">The repository to configure (used within an extension).</param>
            <returns>The configured repository.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForContent.DecorateElementWith``1(ExtendedXmlSerializer.ExtensionModel.IServiceRepository)">
            <summary>
            Convenience method for extension authors.  This is used to establish a fluent context which can further be used to
            decorate the container's <see cref="T:ExtendedXmlSerializer.ContentModel.Content.IElement"/> component.
            </summary>
            <typeparam name="T">The implementation type, of type IElement.</typeparam>
            <param name="this">The repository to configure.</param>
            <returns>The configured repository.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForContent.WithEnumerableSupport(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            Adds support for instances and property types that are explicitly specified as `IEnumerable{T}`.  If an object is
            of a type of `IEnumerable` (essentially, a deferred query), it will be evaluated as a <see cref="T:System.Collections.Generic.List`1"/> and
            saved as such as required by either the instance or property in the object graph.
            </summary>
            <param name="this">The configuration container to configure.</param>
            <returns>The configured configuration container.</returns>
            <seealso href="https://github.com/ExtendedXmlSerializer/home/issues/340" />
            <seealso href="https://twitter.com/vcsjones/status/1204432274000879619" />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForContent.WithDefaultMonitor(ExtendedXmlSerializer.Configuration.IConfigurationContainer,ExtendedXmlSerializer.ExtensionModel.Instances.ISerializationMonitor)">
             <summary>
             Assigns a default serialization monitor for a configuration container.  A serialization monitor is a component
             that gets notified whenever there is a serialization such as OnSerializing, OnSerialized, as well as
             deserialization events such as OnDeserializing, OnDeserialized, etc.
            
             The default serialization monitor is applied for every type that is serialized with the serializer that the
             configured container creates.  Use <see cref="M:ExtendedXmlSerializer.ExtensionMethodsForContent.WithMonitor``1(ExtendedXmlSerializer.Configuration.ITypeConfiguration{``0},ExtendedXmlSerializer.ExtensionModel.Instances.ISerializationMonitor{``0})"/> on a type configuration to
             apply a monitor to a specific type.
             </summary>
             <param name="this">The configuration container to configure.</param>
             <param name="monitor">The monitor to assign as the default monitor.</param>
             <returns>The configured container.</returns>
             <seealso href="https://github.com/ExtendedXmlSerializer/home/issues/264"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForContent.WithMonitor``1(ExtendedXmlSerializer.Configuration.ITypeConfiguration{``0},ExtendedXmlSerializer.ExtensionModel.Instances.ISerializationMonitor{``0})">
             <summary>
             Applies a serialization monitor to a specific type.  A serialization monitor is a component that gets notified
             whenever there is a serialization such as OnSerializing, OnSerialized, as well as deserialization events such as
             OnDeserializing, OnDeserialized, etc.
            
             Note that calling this method will establish a default monitor if one has not already been assigned.  If you also
             want to use a default monitor in addition to type-specific monitors, call the <see cref="M:ExtendedXmlSerializer.ExtensionMethodsForContent.WithDefaultMonitor(ExtendedXmlSerializer.Configuration.IConfigurationContainer,ExtendedXmlSerializer.ExtensionModel.Instances.ISerializationMonitor)" />
             first before calling this method on any types.
             </summary>
             <typeparam name="T">The type to monitor.</typeparam>
             <param name="this">The type configuration to configure.</param>
             <param name="monitor">The monitor to apply to the specified type.</param>
             <returns>The configured type configuration.</returns>
             <seealso href="https://github.com/ExtendedXmlSerializer/home/issues/264" />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForContent.EnableParameterizedContent(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
             <summary>
             Allows content to be read as parameters for a constructor call to activate an object, rather than the more
             traditional route of activating an object and its content read as property assignments.  This is preferred --
             required, even -- if your model is comprised of immutable objects.
            
             Note that there are several requirements for a class to be successfully processed:
            
            	1. only public fields / properties are considered
            	1. any public fields (spit) must be readonly
            	1. any public properties must have a get but not a set (on the public API, at least)
            	1. there must be exactly one interesting constructor, with parameters that are a case-insensitive match for
                each field/property in some order (i.e. there must be an obvious 1:1 mapping between members and constructor
            	   parameter names)
             </summary>
             <param name="this">The container to configure.</param>
             <returns>The configured container.</returns>
             <seealso href="https://github.com/ExtendedXmlSerializer/home/wiki/Features#immutable-classes-and-content"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForContent.EnableParameterizedContentWithPropertyAssignments(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            This is a less strict version of <see cref="M:ExtendedXmlSerializer.ExtensionMethodsForContent.EnableParameterizedContent(ExtendedXmlSerializer.Configuration.IConfigurationContainer)"/>.  Using this version, parameterized
            content works the same as <see cref="M:ExtendedXmlSerializer.ExtensionMethodsForContent.EnableParameterizedContent(ExtendedXmlSerializer.Configuration.IConfigurationContainer)"/> but in addition, all properties defined in the
            deserialized document are also considered and assigned to the target instance if the property is writable.
            </summary>
            <param name="this">The container to configure.</param>
            <returns>The configured container.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForContent.EnableReaderContext(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            Intended for extension authors, and enables a reader context on the deserialization process.  Extension authors
            can use <seealso cref="T:ExtendedXmlSerializer.ExtensionModel.Content.ContentsHistory"/> to retrieve this history of objects being parsed and activated to the
            current point of the graph.  This is valuable when parsing object graphs with many internal properties which in
            turn have their own set of complex properties.
            </summary>
            <param name="this">The container to configure.</param>
            <returns>The configured container.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForContent.EnableImplicitlyDefinedDefaultValues(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
             <summary>
             This is intended to circumvent default behavior which throws an exception for primitive data types when there is
             no content provided for their elements.
            
             For example, say you have a boolean element defined as such: `<Boolean />`  or, perhaps its long-form equivalent `
             <Boolean></Boolean>`.
            
             Either one of these by default will throw a <seealso cref="T:System.FormatException"/>.  Configuring the container with
             <seealso cref="M:ExtendedXmlSerializer.ExtensionMethodsForContent.EnableImplicitlyDefinedDefaultValues(ExtendedXmlSerializer.Configuration.IConfigurationContainer)"/> will allow the use of empty values within document
             elements such as the above without throwing an exception.
             </summary>
             <param name="this">The container to configure.</param>
             <returns>The configured container.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForContent.Emit(ExtendedXmlSerializer.Configuration.IConfigurationContainer,ExtendedXmlSerializer.Configuration.IEmitBehavior)">
            <summary>
            Used to control and determine when content is emitted during serialization.  This is a general-purpose
            configuration that works across every type encountered by the serializer. Use the <seealso cref="T:ExtendedXmlSerializer.Configuration.EmitBehaviors" />
            class to utilize one of the built-in (and identified 😁) behaviors, or implement your own
            <see cref="T:ExtendedXmlSerializer.Configuration.IEmitBehavior"/>.
            </summary>
            <param name="this">The container to configure.</param>
            <param name="behavior">The behavior to apply to the container.</param>
            <returns>The configured container.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForContent.EmitWhen``2(ExtendedXmlSerializer.Configuration.IMemberConfiguration{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Configures a member configuration to only emit when its value meets certain criteria.
            </summary>
            <typeparam name="T">The containing type of the member.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
            <param name="this">The member to configure.</param>
            <param name="specification">The specification to use to determine whether or not to emit the member, based on value.</param>
            <returns>The configured member.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForContent.EmitWhenInstance``2(ExtendedXmlSerializer.Configuration.IMemberConfiguration{``0,``1},System.Func{``0,System.Boolean})">
            <summary>
            Configures a member configuration to only emit when a condition of its containing instance is met.  This is useful
            for when a data value from another member in another part of the containing instance is needed to determine
            whether or not to emit the (currently) configured member.
            </summary>
            <typeparam name="T">The containing type of the member.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
            <param name="this">The member to configure.</param>
            <param name="specification"></param>
            <returns>The configured member.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForContent.EmitWhen``1(ExtendedXmlSerializer.Configuration.ITypeConfiguration{``0},System.Func{``0,System.Boolean})">
            <summary>
            Configures a type configuration so that instances of its type only emit when the provided condition is met.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="this">The type configuration to configure.</param>
            <param name="specification">The specification to determine the condition on when to emit.</param>
            <returns>The configured type configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForContent.IncludeConfiguredMembers(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            Convenience method to iterate through all explicitly configured types and include all explicitly configured
            members.  Only these members will be considered to emit content during serialization as well as reading it
            during deserialization.
            </summary>
            <param name="this">The container to configure.</param>
            <returns>The configured container.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForContent.IncludeConfiguredMembers``1(ExtendedXmlSerializer.Configuration.ITypeConfiguration{``0})">
            <summary>
            Convenience method to iterate through all explicitly configured members of a type and mark them as included.  Only
            these members will be considered to emit content during serialization as well as reading it during
            deserialization.
            </summary>
            <typeparam name="T">The type under configuration.</typeparam>
            <param name="this">The type to configure.</param>
            <returns>The configured type.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForContent.Ignore``2(ExtendedXmlSerializer.Configuration.IMemberConfiguration{``0,``1})">
            <summary>
            Ignores a member so that it is not emitted during serialization, and is not read in during deserialization, even
            if the content is specified in the document.  Note that this establishes a "blacklist" policy so that members that
            are not ignored get processed.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
            <param name="this">The member to configure.</param>
            <returns>The configured member.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForContent.Ignore(ExtendedXmlSerializer.Configuration.IConfigurationContainer,System.Reflection.MemberInfo)">
            <summary>
            Ignores a member so that it is not emitted during serialization, and is not read in during deserialization, even
            if the content is specified in the document.  Note that this establishes a "blacklist" policy so that members that
            are not ignored get processed.
            </summary>
            <param name="this">The container to configure.</param>
            <param name="member">The member to ignore.</param>
            <returns>The configured container.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForContent.Include``2(ExtendedXmlSerializer.Configuration.IMemberConfiguration{``0,``1})">
            <summary>
            Includes a member so that it is emitted during serialization and read during deserialization.  Note that including
            a member establishes a "whitelist" policy so that only members that are explicitly included are considered for processing.
            </summary>
            <typeparam name="T">The type that contains the member.</typeparam>
            <typeparam name="TMember">The type of the member's value.</typeparam>
            <param name="this">The member to configure.</param>
            <returns>The configured member.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForContent.Include(ExtendedXmlSerializer.Configuration.IMemberConfiguration)">
            <summary>
            Includes a member so that it is emitted during serialization and read during deserialization.  Note that including
            a member establishes a "whitelist" policy so that only members that are explicitly included are considered for
            processing.
            </summary>
            <param name="this">The member to configure.</param>
            <returns>The configured member.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForContent.Decorate``1(ExtendedXmlSerializer.ExtensionModel.IServiceRepository,ExtendedXmlSerializer.Core.Specifications.ISpecification{System.Reflection.TypeInfo})">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForContent.DecorateContent``2(ExtendedXmlSerializer.ExtensionModel.IServiceRepository)">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForContent.DecorateContent``1(ExtendedXmlSerializer.ExtensionModel.IServiceRepository,ExtendedXmlSerializer.Core.Specifications.ISpecification{System.Reflection.TypeInfo})">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForContent.OptimizeConverters(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForContent.OptimizeConverters(ExtendedXmlSerializer.Configuration.IConfigurationContainer,ExtendedXmlSerializer.Core.Sources.IAlteration{ExtendedXmlSerializer.ContentModel.Conversion.IConverter})">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForContent.OnlyConfiguredProperties(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForContent.OnlyConfiguredProperties``1(ExtendedXmlSerializer.Configuration.ITypeConfiguration{``0})">
            <exclude />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionMethodsForContentModel">
            <summary>
            Extension methods that assist or enable functionality found within the content model namespace (
            <see cref="N:ExtendedXmlSerializer.ContentModel"/>).
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForContentModel.For``1(ExtendedXmlSerializer.ContentModel.ISerializer)">
            <summary>
            Given a generalized serializer, create a type-specific serializer that handles the specified type.  This is
            typically used for simple casting to and from a general object type and should be handled with care as an
            incorrect type will throw errors.
            </summary>
            <typeparam name="T">The type to use for serialization.</typeparam>
            <param name="this">The this.</param>
            <returns>ISerializer&lt;T&gt;.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForContentModel.Adapt``1(ExtendedXmlSerializer.ContentModel.ISerializer{``0})">
            <summary>
            Given a type-specific serializer, create a generalized serializer that serializes and deserializes in terms of a
            general <see cref="T:System.Object"/>.
            </summary>
            <typeparam name="T">The type that the given serializer uses.</typeparam>
            <param name="this">The serializer used to create a new serializer.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForContentModel.Adapt``1(ExtendedXmlSerializer.ContentModel.IWriter{``0})">
            <summary>
            Given a type-specific writer, create a generalized writer that writers in terms of a general
            <see cref="T:System.Object"/>.
            </summary>
            <typeparam name="T">The type that the writer is used to write.</typeparam>
            <param name="this">The writer instance which to base the new writer.</param>
            <returns>The generalized writer.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForContentModel.Structured``1(ExtendedXmlSerializer.ContentModel.Conversion.IConverter{``0})">
            <summary>
            Given a struct-specific converter, creates its nullable equivalent.
            </summary>
            <typeparam name="T">The struct type of the converter.</typeparam>
            <param name="this">The converter upon which to base the new converter.</param>
            <returns>IConverter&lt;System.Nullable&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForContentModel.Adapt``1(ExtendedXmlSerializer.ContentModel.Conversion.IConverter{``0})">
            <summary>
            Given a type-specific converter, create a generalized converter that serializes and deserializes in terms of a
            general <see cref="T:System.Object"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this">The type-specific converter upon which to base the new generalized converter.</param>
            <returns>A generalized IConverter.</returns>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionMethodsForCoreSources">
            <summary>
            Extension methods that assist or enable functionality found within the namespace for sources (
            <see cref="N:ExtendedXmlSerializer.Core.Sources"/>).  This is considered internal code and while publicly exposed, is not supported.  Feel
            free to knock yourself out with it if you think you can figure it out, however. 😆
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSources.Adapt``1(ExtendedXmlSerializer.Core.Sources.IAlteration{``0})">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="T"></typeparam>
            <param name="this">The this.</param>
            <returns>IAlteration&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSources.Get``1(ExtendedXmlSerializer.Core.Sources.IParameterizedSource{System.IO.Stream,``0},System.String)">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="T"></typeparam>
            <param name="this">The this.</param>
            <param name="parameter">The parameter.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSources.Get``1(ExtendedXmlSerializer.Core.Sources.IParameterizedSource{System.Reflection.TypeInfo,``0},System.Type)">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="T"></typeparam>
            <param name="this">The this.</param>
            <param name="parameter">The parameter.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSources.Get``1(ExtendedXmlSerializer.Core.Sources.IParameterizedSource{System.Type,``0},System.Reflection.TypeInfo)">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="T"></typeparam>
            <param name="this">The this.</param>
            <param name="parameter">The parameter.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSources.To``3(ExtendedXmlSerializer.Core.Sources.IParameterizedSource{``0,``1},ExtendedXmlSerializer.Core.Sources.IParameterizedSource{``1,``2})">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="TParameter">The type of the t parameter.</typeparam>
            <typeparam name="TResult">The type of the t result.</typeparam>
            <typeparam name="TTo">The type of the t to.</typeparam>
            <param name="this">The this.</param>
            <param name="coercer">The coercer.</param>
            <returns>IParameterizedSource&lt;TParameter, TTo&gt;.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSources.In``3(ExtendedXmlSerializer.Core.Sources.IParameterizedSource{``1,``2},ExtendedXmlSerializer.Core.Sources.IParameterizedSource{``0,``1})">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="TFrom">The type of the t from.</typeparam>
            <typeparam name="TTo">The type of the t to.</typeparam>
            <typeparam name="TResult">The type of the t result.</typeparam>
            <param name="this">The this.</param>
            <param name="coercer">The coercer.</param>
            <returns>IParameterizedSource&lt;TFrom, TResult&gt;.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSources.GetAny``2(ExtendedXmlSerializer.Core.Sources.IParameterizedSource{``0,System.Collections.Immutable.ImmutableArray{``1}},``0)">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TItem">The type of the t item.</typeparam>
            <param name="this">The this.</param>
            <param name="parameter">The parameter.</param>
            <returns>System.Nullable&lt;ImmutableArray&lt;TItem&gt;&gt;.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSources.If``2(ExtendedXmlSerializer.Core.Sources.IParameterizedSource{``0,``1},ExtendedXmlSerializer.Core.Specifications.ISpecification{``0})">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="TParameter">The type of the t parameter.</typeparam>
            <typeparam name="TResult">The type of the t result.</typeparam>
            <param name="this">The this.</param>
            <param name="specification">The specification.</param>
            <returns>IParameterizedSource&lt;TParameter, TResult&gt;.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSources.If``2(``1,ExtendedXmlSerializer.Core.Specifications.ISpecification{``0})">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="TParameter">The type of the t parameter.</typeparam>
            <typeparam name="TResult">The type of the t result.</typeparam>
            <param name="this">The this.</param>
            <param name="specification">The specification.</param>
            <returns>IParameterizedSource&lt;TParameter, TResult&gt;.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSources.Let``2(ExtendedXmlSerializer.Core.Sources.IParameterizedSource{``0,``1},ExtendedXmlSerializer.Core.Specifications.ISpecification{``0},ExtendedXmlSerializer.Core.Sources.IParameterizedSource{``0,``1})">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="TParameter">The type of the t parameter.</typeparam>
            <typeparam name="TResult">The type of the t result.</typeparam>
            <param name="this">The this.</param>
            <param name="specification">The specification.</param>
            <param name="other">The other.</param>
            <returns>IParameterizedSource&lt;TParameter, TResult&gt;.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSources.Let``2(ExtendedXmlSerializer.Core.Sources.IParameterizedSource{``0,``1},ExtendedXmlSerializer.Core.Specifications.ISpecification{``0},ExtendedXmlSerializer.Core.Specifications.ISpecification{``1},ExtendedXmlSerializer.Core.Sources.IParameterizedSource{``0,``1})">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="TParameter">The type of the t parameter.</typeparam>
            <typeparam name="TResult">The type of the t result.</typeparam>
            <param name="this">The this.</param>
            <param name="specification">The specification.</param>
            <param name="result">The result.</param>
            <param name="other">The other.</param>
            <returns>IParameterizedSource&lt;TParameter, TResult&gt;.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSources.Let``2(ExtendedXmlSerializer.Core.Sources.IParameterizedSource{``0,``1},ExtendedXmlSerializer.Core.Specifications.ISpecification{``0},``1)">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="TParameter">The type of the t parameter.</typeparam>
            <typeparam name="TResult">The type of the t result.</typeparam>
            <param name="this">The this.</param>
            <param name="specification">The specification.</param>
            <param name="other">The other.</param>
            <returns>IParameterizedSource&lt;TParameter, TResult&gt;.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSources.Let``2(``1,ExtendedXmlSerializer.Core.Specifications.ISpecification{``0},``1)">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="TSpecification">The type of the t specification.</typeparam>
            <typeparam name="TInstance">The type of the t instance.</typeparam>
            <param name="this">The this.</param>
            <param name="specification">The specification.</param>
            <param name="other">The other.</param>
            <returns>IParameterizedSource&lt;TSpecification, TInstance&gt;.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSources.Or``2(ExtendedXmlSerializer.Core.Sources.IParameterizedSource{``0,``1},ExtendedXmlSerializer.Core.Sources.IParameterizedSource{``0,``1})">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="TParameter">The type of the t parameter.</typeparam>
            <typeparam name="TResult">The type of the t result.</typeparam>
            <param name="this">The this.</param>
            <param name="next">The next.</param>
            <returns>IParameterizedSource&lt;TParameter, TResult&gt;.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSources.Alter``1(System.Collections.Generic.IEnumerable{ExtendedXmlSerializer.Core.Sources.IAlteration{``0}},``0)">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="T"></typeparam>
            <param name="this">The this.</param>
            <param name="seed">The seed.</param>
            <returns>T.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSources.Build``2(ExtendedXmlSerializer.Core.Sources.IParameterizedSource{``0,``1},``0)">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="TParameter">The type of the t parameter.</typeparam>
            <typeparam name="TResult">The type of the t result.</typeparam>
            <param name="this">The this.</param>
            <param name="parameter">The parameter.</param>
            <returns>Func&lt;TResult&gt;.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSources.Build``2(System.Func{``0,``1},``0)">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="TParameter">The type of the t parameter.</typeparam>
            <typeparam name="TResult">The type of the t result.</typeparam>
            <param name="this">The this.</param>
            <param name="parameter">The parameter.</param>
            <returns>Func&lt;TResult&gt;.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSources.FixedSelection``2(ExtendedXmlSerializer.Core.Sources.IParameterizedSource{``0,``1},``0)">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="TParameter">The type of the t parameter.</typeparam>
            <typeparam name="TResult">The type of the t result.</typeparam>
            <param name="this">The this.</param>
            <param name="parameter">The parameter.</param>
            <returns>ISource&lt;TResult&gt;.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSources.FixedSelection``2(System.Func{``0,``1},``0)">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="TParameter">The type of the t parameter.</typeparam>
            <typeparam name="TResult">The type of the t result.</typeparam>
            <param name="this">The this.</param>
            <param name="parameter">The parameter.</param>
            <returns>ISource&lt;TResult&gt;.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSources.Singleton``1(ExtendedXmlSerializer.Core.Sources.ISource{``0})">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="T"></typeparam>
            <param name="this">The this.</param>
            <returns>ISource&lt;T&gt;.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSources.ToSelectionDelegate``2(ExtendedXmlSerializer.Core.Sources.IParameterizedSource{``0,``1})">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="TParameter">The type of the t parameter.</typeparam>
            <typeparam name="TResult">The type of the t result.</typeparam>
            <param name="this">The this.</param>
            <returns>Func&lt;TParameter, TResult&gt;.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSources.ToSourceDelegate``1(ExtendedXmlSerializer.Core.Sources.ISource{``0})">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="T"></typeparam>
            <param name="this">The this.</param>
            <returns>Func&lt;T&gt;.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSources.ToDelegate``1(ExtendedXmlSerializer.Core.Sources.ISource{``0})">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSources.ToDelegate``2(ExtendedXmlSerializer.Core.Sources.IParameterizedSource{``0,``1})">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSources.Fix``2(ExtendedXmlSerializer.Core.Sources.IParameterizedSource{``0,``1},``0)">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSources.Fix``2(System.Func{``0,``1},``0)">
            <exclude />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionMethodsForCoreSpecifications">
            <summary>
            Extension methods that assist or enable functionality found within the namespace for specifications (
            <see cref="N:ExtendedXmlSerializer.Core.Sources"/>).  This is considered internal code and while publicly exposed, is not supported.  Feel
            free to knock yourself out with it if you think you can figure it out, however. 😆
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSpecifications.IfAssigned``2(ExtendedXmlSerializer.Core.Sources.IParameterizedSource{``0,``1})">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="TParameter">The type of the t parameter.</typeparam>
            <typeparam name="TResult">The type of the t result.</typeparam>
            <param name="this">The this.</param>
            <returns>ISpecification&lt;TParameter&gt;.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSpecifications.IfAssigned``2(System.Func{``0,``1})">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="TParameter">The type of the t parameter.</typeparam>
            <typeparam name="TResult">The type of the t result.</typeparam>
            <param name="this">The this.</param>
            <returns>ISpecification&lt;TParameter&gt;.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSpecifications.ToDelegate``1(ExtendedXmlSerializer.Core.Specifications.ISpecification{``0})">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="T"></typeparam>
            <param name="this">The this.</param>
            <returns>Func&lt;T, System.Boolean&gt;.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSpecifications.Build``1(ExtendedXmlSerializer.Core.Specifications.ISpecification{System.Reflection.TypeInfo})">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="T"></typeparam>
            <param name="this">The this.</param>
            <returns>Func&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSpecifications.Build``1(ExtendedXmlSerializer.Core.Specifications.ISpecification{``0},``0)">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="T"></typeparam>
            <param name="this">The this.</param>
            <param name="parameter">The parameter.</param>
            <returns>Func&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSpecifications.Fix``1(ExtendedXmlSerializer.Core.Specifications.ISpecification{``0},``0)">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="T"></typeparam>
            <param name="this">The this.</param>
            <param name="parameter">The parameter.</param>
            <returns>Func&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSpecifications.Any``1(ExtendedXmlSerializer.Core.Specifications.ISpecification{``0},``0[])">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="T"></typeparam>
            <param name="this">The this.</param>
            <param name="parameters">The parameters.</param>
            <returns>ISpecification&lt;T&gt;.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSpecifications.Or``1(ExtendedXmlSerializer.Core.Specifications.ISpecification{``0},ExtendedXmlSerializer.Core.Specifications.ISpecification{``0}[])">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="T"></typeparam>
            <param name="this">The this.</param>
            <param name="others">The others.</param>
            <returns>ISpecification&lt;T&gt;.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSpecifications.And``1(ExtendedXmlSerializer.Core.Specifications.ISpecification{``0},ExtendedXmlSerializer.Core.Specifications.ISpecification{``0}[])">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="T"></typeparam>
            <param name="this">The this.</param>
            <param name="others">The others.</param>
            <returns>ISpecification&lt;T&gt;.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSpecifications.Inverse``1(ExtendedXmlSerializer.Core.Specifications.ISpecification{``0})">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="T"></typeparam>
            <param name="this">The this.</param>
            <returns>ISpecification&lt;T&gt;.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSpecifications.AdaptForNull``1(ExtendedXmlSerializer.Core.Specifications.ISpecification{``0})">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="T"></typeparam>
            <param name="this">The this.</param>
            <returns>ISpecification&lt;System.Object&gt;.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForCoreSpecifications.Adapt``1(ExtendedXmlSerializer.Core.Specifications.ISpecification{``0})">
            <summary>This is considered unsupported internal framework code and is not intended for external use.</summary>
            <typeparam name="T"></typeparam>
            <param name="this">The this.</param>
            <returns>ISpecification&lt;System.Object&gt;.</returns>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionMethodsForEncryption">
            <summary>
            Extension methods that assist or enable functionality found within the extension model namespace for encryption (<see cref="N:ExtendedXmlSerializer.ExtensionModel.Encryption"/>).
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForEncryption.Encrypt``2(ExtendedXmlSerializer.Configuration.IMemberConfiguration{``0,``1})">
            <summary>
            Encrypts the specified member with the default encryption, which is a base-64 string.
            </summary>
            <typeparam name="T">The containing type of the member.</typeparam>
            <typeparam name="TMember">The member type.</typeparam>
            <param name="this">The member to configure.</param>
            <returns>The configured MemberConfiguration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForEncryption.UseEncryptionAlgorithm(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            Configures a container for default encryption, which is base-64.  Every registered converter will be wrapped with
            a converter which will further encrypt its reading and writing.
            </summary>
            <param name="this">The container to configure for encryption.</param>
            <returns>A configured IConfigurationContainer.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForEncryption.UseEncryptionAlgorithm(ExtendedXmlSerializer.Configuration.IConfigurationContainer,ExtendedXmlSerializer.ExtensionModel.Encryption.IEncryption)">
            <summary>
            Configures a container for encryption with the specified encryption component.  Every registered converter will be
            wrapped with a converter which will further encrypt its reading and writing.
            </summary>
            <param name="this">The container to configure for encryption.</param>
            <param name="encryption">The encryption with which to encrypt and decrypt data.</param>
            <returns>A configured IConfigurationContainer.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForEncryption.UseEncryptionAlgorithm(ExtendedXmlSerializer.Configuration.IConfigurationContainer,ExtendedXmlSerializer.Core.Sources.IAlteration{ExtendedXmlSerializer.ContentModel.Conversion.IConverter})">
            <summary>
            Configures a container for encryption with the specified converter alteration.  Every registered converter will be
            altered by the provided alteration.
            </summary>
            <param name="this">The container which to configure for encryption.</param>
            <param name="parameter">The alteration with which to alter each converter in the configuration container.</param>
            <returns>A configured IConfigurationContainer.</returns>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionMethodsForExtensionModel">
            <summary>
            Extension methods that assist or enable functionality found within the extension model namespace (
            <see cref="N:ExtendedXmlSerializer.ExtensionModel"/>).
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForExtensionModel.AllowTargetInstances(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            Enables the use of target instances to read values into when serialization occurs.  Use this in conjunction with
            <see cref="M:ExtendedXmlSerializer.ExtensionMethodsForExtensionModel.UsingTarget``1(ExtendedXmlSerializer.IExtendedXmlSerializer,``0)" /> to establish a target instance during deserialization.  In this context, values read
            from the source document will be assigned to the provided existing target instance rather than the default
            behavior of creating a new instance altogether.
            </summary>
            <param name="this">The configuration container to configure.</param>
            <returns>The configured configuration container.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForExtensionModel.UsingTarget``1(ExtendedXmlSerializer.IExtendedXmlSerializer,``0)">
            <summary>
            Specifies an existing reference to use as target for deserialization of values.  Read values during
            deserialization will be read and assigned into the provided target instance. NOTICE: Be sure to call
            <see cref="M:ExtendedXmlSerializer.ExtensionMethodsForExtensionModel.AllowTargetInstances(ExtendedXmlSerializer.Configuration.IConfigurationContainer)"/> when configuring the container before using this method.
            </summary>
            <typeparam name="T">The instance type.</typeparam>
            <param name="this">The serializer</param>
            <param name="instance">The instance to deserialize</param>
            <returns>A deserialization context that will assign values to the provided instance.</returns>
            <seealso href="https://github.com/ExtendedXmlSerializer/home/issues/230" />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForExtensionModel.EnableThreadProtection(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            Enables thread protection and wraps a simple `lock` around the reading and writing of the created serializer.
            </summary>
            <param name="this">The configuration container to configure.</param>
            <returns>The configured configuration container.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForExtensionModel.EnableMemberExceptionHandling(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            Enables member exception handling during serialization and deserialization.  By default when errors are
            encountered during these processes the exception is simply thrown without much context or detail.  This is for
            performance considerations and to cut down on try/catches.  Enabling this feature wraps
            serialization/deserialization in try-catches to provide more detail when exceptions occur.
            </summary>
            <param name="this">The configuration container to configure.</param>
            <returns>The configured configuration container.</returns>
            <seealso href="https://mattwarren.org/2016/12/20/Why-Exceptions-should-be-Exceptional/"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForExtensionModel.WithUnknownContent(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            Creates a new context for Unknown Content and allows the user to determine how the serializer behaves when it
            encounters unknown content during deserialization.
            </summary>
            <param name="this">The configuration container to configure.</param>
            <returns>The UnknownContentContext for further action and configuration.</returns>
            <seealso href="https://github.com/ExtendedXmlSerializer/home/issues/271#issuecomment-550976753" />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForExtensionModel.EnableRootInstances``1(``0)">
            <summary>
            This is considered internal framework functionality and is not intended to be used from your code.  However. 😁
            This enables root instances on a serializer.  When used, components that use the <see cref="T:ExtendedXmlSerializer.ExtensionModel.IRootInstances"/>
            interface will have access to the root instance that was passed in for serialization, usually by using
            <see cref="T:ExtendedXmlSerializer.IExtendedXmlSerializer"/>'s `Serialize` method.
            </summary>
            <typeparam name="T">The root context type.</typeparam>
            <param name="this">The root context (usually an <see cref="T:ExtendedXmlSerializer.Configuration.IConfigurationContainer"/>) to configure.</param>
            <returns>The configured root context (usually an <see cref="T:ExtendedXmlSerializer.Configuration.IConfigurationContainer"/>).</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForExtensionModel.EnableExpressions(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            This is considered internal framework functionality and is not intended to be used from your code.  However. 😁
            This enables the use of expressions within deserialized properties (attached properties or markup extensions), so
            that they may be evaluated to a runtime value.
            </summary>
            <param name="this">The configuration container to configure.</param>
            <returns>The configured configuration container.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForExtensionModel.EnableMarkupExtensions(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            Enables markup extensions support for the container.  This allows you to create markup extensions and enable them
            within your XML, much like Xaml does for WPF.
            </summary>
            <param name="this">The configuration container to configure.</param>
            <returns>The configured configuration container.</returns>
            <seealso href="https://docs.microsoft.com/en-us/dotnet/framework/wpf/advanced/markup-extensions-and-wpf-xaml"/>
            <seealso href="https://github.com/ExtendedXmlSerializer/home/wiki/Features#xaml-ness-markup-extensions"/>
            <seealso href="https://github.com/ExtendedXmlSerializer/home/blob/25514a768f7dc6b3166119254a1bd80ea13e1dbe/test/ExtendedXmlSerializer.Tests/ExtensionModel/Markup/MarkupExtensionTests.cs"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForExtensionModel.EnableAllConstructors(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            Enables all constructors -- in particular, private ones -- as candidates for selection when selecting a
            constructor to activate during deserialization.  By default, only public constructors are considered.  Calling
            this method configures the serializer so that all constructors -- private and otherwise -- are also considered.
            </summary>
            <param name="this">The configuration container to configure.</param>
            <returns>The configured configuration container.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForExtensionModel.WithArrayTypes(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            This is an unused method and will be removed in a future version.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForExtensionModel.Deserialize``1(ExtendedXmlSerializer.IExtendedXmlSerializer,``0,System.String)">
            <summary>
            Use `IExtendedXmlSerializer.UsingTarget.Deserialize` instead.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="existing"></param>
            <param name="data"></param>
            <returns></returns>
            <seealso cref="M:ExtendedXmlSerializer.Configuration.ReferencedDeserializationContext`1.Deserialize(System.String)"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForExtensionModel.Deserialize``1(ExtendedXmlSerializer.IExtendedXmlSerializer,``0,System.Xml.XmlReaderSettings,System.String)">
            <summary>
            Use `IExtendedXmlSerializer.UsingTarget.Deserialize` instead.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="existing"></param>
            <param name="settings"></param>
            <param name="data"></param>
            <returns></returns>
            <seealso cref="M:ExtendedXmlSerializer.Configuration.ReferencedDeserializationContext`1.Deserialize(System.Xml.XmlReaderSettings,System.String)"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForExtensionModel.Deserialize``1(ExtendedXmlSerializer.IExtendedXmlSerializer,``0,System.IO.Stream)">
            <summary>
            Use `IExtendedXmlSerializer.UsingTarget.Deserialize` instead.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="existing"></param>
            <param name="stream"></param>
            <returns></returns>
            <seealso cref="M:ExtendedXmlSerializer.Configuration.ReferencedDeserializationContext`1.Deserialize(System.IO.Stream)"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForExtensionModel.Deserialize``1(ExtendedXmlSerializer.IExtendedXmlSerializer,``0,System.Xml.XmlReaderSettings,System.IO.Stream)">
            <summary>
            Use `IExtendedXmlSerializer.UsingTarget.Deserialize` instead.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="existing"></param>
            <param name="settings"></param>
            <param name="stream"></param>
            <returns></returns>
            <seealso cref="M:ExtendedXmlSerializer.Configuration.ReferencedDeserializationContext`1.Deserialize(System.Xml.XmlReaderSettings,System.IO.Stream)"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForExtensionModel.AllowExistingInstances(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            Deprecated.  Use `AllowTargetInstances` instead.
            </summary>
            <param name="this"></param>
            <returns></returns>
            <seealso cref="M:ExtendedXmlSerializer.ExtensionMethodsForExtensionModel.AllowTargetInstances(ExtendedXmlSerializer.Configuration.IConfigurationContainer)" />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForExtensionModel.EnableUnknownContentHandling(ExtendedXmlSerializer.Configuration.IConfigurationContainer,System.Action{ExtendedXmlSerializer.ContentModel.Format.IFormatReader})">
            <summary>
            This method is being deprecated.  Please use `ConfigurationContainer.WithUnknownContent.Call` instead.
            </summary>
            <param name="this"></param>
            <param name="onMissing"></param>
            <returns></returns>
            <seealso cref="M:ExtendedXmlSerializer.Configuration.UnknownContentContext.Call(System.Action{ExtendedXmlSerializer.ContentModel.Format.IFormatReader})"/>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionMethodsForImplicitTyping">
            <summary>
            A set of extension methods that assist in enabling implicit typing for the configuration container.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForImplicitTyping.EnableImplicitTyping(ExtendedXmlSerializer.Configuration.IConfigurationContainer,System.Type[])">
            <summary>
            Enables implicit typing on a configuration container, which will create a serializer that does not emit xmlns
            namespaces for the provided types, nor will it require them during deserialization.  This makes XML more JSON-like
            in its resulting output and required input, leading to more streamlined and less verbose documents.  Note that
            this feature has limits, namely that there can be only one type with any given name.  The type name is considered
            the unique identifier and if there is more than one type with the same name an exception is thrown.
            </summary>
            <param name="this">The configuration container to configure.</param>
            <param name="types">The types to register.  Ensure the provided types all have unique names or else an exception
            is thrown.</param>
            <returns>The configured configuration container.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForImplicitTyping.EnableImplicitTyping(ExtendedXmlSerializer.Configuration.IConfigurationContainer,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Convenience method to pass in a source type enumerable and resolve it into an array to pass to
            <see cref="M:ExtendedXmlSerializer.ExtensionMethodsForImplicitTyping.EnableImplicitTyping(ExtendedXmlSerializer.Configuration.IConfigurationContainer,System.Type[])" />.  This is primarily used by the
            EnableImplicitTyping* methods, but can also be used with any enumerable of <see cref="T:System.Type"/>.
            </summary>
            <param name="this">The configuration container to configure.</param>
            <param name="types">The types to register as implicit.</param>
            <returns>The configured configuration container.</returns>
            <seealso cref="M:ExtendedXmlSerializer.ExtensionMethodsForImplicitTyping.EnableImplicitTyping(ExtendedXmlSerializer.Configuration.IConfigurationContainer,System.Type[])"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForImplicitTyping.EnableImplicitTypingFromPublicNested``1(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            Convenience method to enable implicit typing on a container, using all public-nested types found within the
            provided subject type.  All public nested types found within the provided subject type will be included as an
            implicit type.
            </summary>
            <typeparam name="T">The subject type to query for type resolution.</typeparam>
            <param name="this">The configuration container to configure.</param>
            <returns>The configured configuration container.</returns>
            <seealso cref="M:ExtendedXmlSerializer.ExtensionMethodsForImplicitTyping.EnableImplicitTyping(ExtendedXmlSerializer.Configuration.IConfigurationContainer,System.Type[])"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForImplicitTyping.EnableImplicitTypingFromNested``1(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            Convenience method to enable implicit typing on a container, using all nested types -- private or otherwise --
            found within the provided subject type.  All nested types found within the provided subject type will be
            included and registered as an implicit type.
            </summary>
            <typeparam name="T">The subject type to query for type resolution.</typeparam>
            <param name="this">The configuration container to configure.</param>
            <returns>The configured configuration container.</returns>
            <seealso cref="M:ExtendedXmlSerializer.ExtensionMethodsForImplicitTyping.EnableImplicitTyping(ExtendedXmlSerializer.Configuration.IConfigurationContainer,System.Type[])"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForImplicitTyping.EnableImplicitTypingFromAll``1(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            Convenience method to enable implicit typing on a container, using all found types within the provided subject
            type's assembly.  All types found within the provided subject type's assembly will be included and registered as
            an implicit type.  Use this with care and ensure that the names of all the types found within the assembly are
            unique. Otherwise, an exception will be thrown if more than one type share the same name.
            </summary>
            <typeparam name="T">The subject type to query for type resolution.</typeparam>
            <param name="this">The configuration container to configure.</param>
            <returns>The configured configuration container.</returns>
            <seealso cref="M:ExtendedXmlSerializer.ExtensionMethodsForImplicitTyping.EnableImplicitTyping(ExtendedXmlSerializer.Configuration.IConfigurationContainer,System.Type[])"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForImplicitTyping.EnableImplicitTypingFromPublic``1(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            Convenience method to enable implicit typing on a container, using all found public types within the provided
            subject type's assembly.  All public types found within the provided subject type's assembly will be included and
            registered as an implicit type.  Use this with care and ensure that the names of all the public types found within
            the assembly are unique.  Otherwise, an exception will be thrown if more than one type share the same name.
            </summary>
            <typeparam name="T">The subject type to query for type resolution.</typeparam>
            <param name="this">The configuration container to configure.</param>
            <returns>The configured configuration container.</returns>
            <seealso cref="M:ExtendedXmlSerializer.ExtensionMethodsForImplicitTyping.EnableImplicitTyping(ExtendedXmlSerializer.Configuration.IConfigurationContainer,System.Type[])"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForImplicitTyping.EnableImplicitTypingFromNamespace``1(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            Convenience method to enable implicit typing on a container, using all found types within the provided subject
            type's namespace.  All types found within the provided subject type's namespace will be included and registered as
            an implicit type.  Use this with care and ensure that the names of all the types found within the namespace are
            unique. Otherwise, an exception will be thrown if more than one type share the same name.
            </summary>
            <typeparam name="T">The subject type to query for type resolution.</typeparam>
            <param name="this">The configuration container to configure.</param>
            <returns>The configured configuration container.</returns>
            <seealso cref="M:ExtendedXmlSerializer.ExtensionMethodsForImplicitTyping.EnableImplicitTyping(ExtendedXmlSerializer.Configuration.IConfigurationContainer,System.Type[])"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForImplicitTyping.EnableImplicitTypingFromNamespacePublic``1(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            Convenience method to enable implicit typing on a container, using all found public types within the provided
            subject type's namespace.  All public types found within the provided subject type's namespace will be included and
            registered as an implicit type.  Use this with care and ensure that the names of all the public types found within
            the namespace are unique.  Otherwise, an exception will be thrown if more than one type share the same name.
            </summary>
            <typeparam name="T">The subject type to query for type resolution.</typeparam>
            <param name="this">The configuration container to configure.</param>
            <returns>The configured configuration container.</returns>
            <seealso cref="M:ExtendedXmlSerializer.ExtensionMethodsForImplicitTyping.EnableImplicitTyping(ExtendedXmlSerializer.Configuration.IConfigurationContainer,System.Type[])"/>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionMethodsForLocation">
            <summary>
            Extension methods used for service location and registration.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForLocation.RegisterWithDependencies``1(ExtendedXmlSerializer.ExtensionModel.IServiceRepository)">
            <summary>
            Convenience method to inspect the provided type's dependencies and register them all.
            </summary>
            <param name="this">The repository to configure.</param>
            <typeparam name="T">The type to inspect.</typeparam>
            <returns>The configured repository.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForLocation.RegisterWithDependencies``2(ExtendedXmlSerializer.ExtensionModel.IServiceRepository)">
            <summary>
            Convenience method to inspect the provided implementation type's dependencies and register them all.
            </summary>
            <typeparam name="TFrom">The base type.</typeparam>
            <typeparam name="TTo">The implementation type.</typeparam>
            <param name="this">The repository to configure.</param>
            <returns>The configured repository.</returns>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionMethodsForRegistration">
            <summary>
            A set of extension methods to assist in registration operations for the container, its types, and/or its type's members.
            Registrations can be serializers or converters to change the default behavior on how these components emit or read
            in their content.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForRegistration.Register(ExtendedXmlSerializer.Configuration.IConfigurationContainer,System.Runtime.Serialization.ISerializationSurrogateProvider)">
            <summary>
            Registers the provided surrogate provider with the provided configuration container container.  The surrogate
            provider will be used to query for selecting a serializer if it contains one that satisfies the requested type.
            </summary>
            <param name="this">The configuration container to configure.</param>
            <param name="provider">The provider to register.</param>
            <returns>The configured configuration container.</returns>
            <seealso href="https://github.com/ExtendedXmlSerializer/home/issues/161" />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForRegistration.Register``1(ExtendedXmlSerializer.Configuration.ITypeConfiguration{``0})">
            <summary>
            Establishes a registration context for the specified type configuration.  From there, you can perform registration
            operations on serializers and converters for the type.
            </summary>
            <typeparam name="T">The type under configuration.</typeparam>
            <param name="this">The type configuration to configure.</param>
            <returns>A type registration context.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForRegistration.Register``2(ExtendedXmlSerializer.Configuration.IMemberConfiguration{``0,``1})">
            <summary>
            Establishes a registration context for the specified member configuration.  From there, you can perform
            registration operations on serializers and converters for the type.
            </summary>
            <typeparam name="T">The member's containing type.</typeparam>
            <typeparam name="TMember">The member's value type.</typeparam>
            <param name="this">The member configuration to configure.</param>
            <returns>The member registration context.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForRegistration.Register``2(ExtendedXmlSerializer.Configuration.IMemberConfiguration{``0,``1},System.Type)">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForRegistration.Register``2(ExtendedXmlSerializer.Configuration.IMemberConfiguration{``0,``1},ExtendedXmlSerializer.ContentModel.ISerializer{``1})">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForRegistration.Register``2(ExtendedXmlSerializer.Configuration.IMemberConfiguration{``0,``1},ExtendedXmlSerializer.ContentModel.ISerializer)">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForRegistration.Unregister``2(ExtendedXmlSerializer.Configuration.IMemberConfiguration{``0,``1})">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForRegistration.Register``2(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForRegistration.Register``1(ExtendedXmlSerializer.Configuration.ITypeConfiguration{``0},System.Type)">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForRegistration.Register``1(ExtendedXmlSerializer.Configuration.ITypeConfiguration{``0},ExtendedXmlSerializer.ContentModel.ISerializer{``0})">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForRegistration.Register``1(ExtendedXmlSerializer.Configuration.ITypeConfiguration{``0},ExtendedXmlSerializer.ContentModel.ISerializer)">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForRegistration.Unregister``1(ExtendedXmlSerializer.Configuration.ITypeConfiguration{``0})">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForRegistration.Register``1(ExtendedXmlSerializer.Configuration.IConfigurationContainer,System.Func{``0,System.String},System.Func{System.String,``0})">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForRegistration.Register``1(ExtendedXmlSerializer.Configuration.IConfigurationContainer,ExtendedXmlSerializer.ContentModel.Conversion.IConverter{``0})">
            <exclude />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForRegistration.Unregister``1(ExtendedXmlSerializer.Configuration.IConfigurationContainer,ExtendedXmlSerializer.ContentModel.Conversion.IConverter{``0})">
            <exclude />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionMethodsForSerialization">
            <summary>
            Extension methods for convenience that assist in simplifying the amount of code required for serializing instances
            and deserializing document sources.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForSerialization.Serialize(ExtendedXmlSerializer.IExtendedXmlSerializer,System.Object)">
            <summary>
            Serialization convenience method to serialize the provided instance into a string.
            </summary>
            <param name="this">The serializer to use for serialization.</param>
            <param name="instance">The instance to serialize.</param>
            <returns>A string that represents the provided instance in Xml format.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForSerialization.Serialize(ExtendedXmlSerializer.IExtendedXmlSerializer,System.Xml.XmlWriterSettings,System.Object)">
            <summary>
            Serialization convenience method to serialize the provided instance into a string with the provided
            <see cref="T:System.Xml.XmlWriterSettings"/>.
            </summary>
            <param name="this">The serializer to use for serialization.</param>
            <param name="settings">The writer settings for handling the xml writer used create the resulting Xml.</param>
            <param name="instance">The instance to serialize.</param>
            <returns>A string that represents the provided instance in Xml format.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForSerialization.Serialize(ExtendedXmlSerializer.IExtendedXmlSerializer,System.IO.Stream,System.Object)">
            <summary>
            Serialization convenience method to serialize the provided instance into a string along with the provided
            destination <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="this">The serializer to use for serialization.</param>
            <param name="stream">The destination stream.</param>
            <param name="instance">The instance to serialize.</param>
            <returns>A string that represents the provided instance in Xml format.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForSerialization.Serialize(ExtendedXmlSerializer.IExtendedXmlSerializer,System.Xml.XmlWriterSettings,System.IO.Stream,System.Object)">
            <summary>
            Serialization convenience method to serialize the provided instance into a string along with the provided
            destination <see cref="T:System.IO.Stream"/> while using the settings configured in the provided
            <see cref="T:System.Xml.XmlWriterSettings"/>.
            </summary>
            <param name="this">The serializer to use for serialization.</param>
            <param name="settings">The writer settings for handling the xml writer used create the resulting Xml.</param>
            <param name="stream">The destination stream.</param>
            <param name="instance">The instance to serialize.</param>
            <returns>A string that represents the provided instance in Xml format.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForSerialization.Serialize(ExtendedXmlSerializer.IExtendedXmlSerializer,System.IO.TextWriter,System.Object)">
            <summary>
            Serialization convenience method to serialize the provided instance into the provided destination
            <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="this">The serializer to use for serialization.</param>
            <param name="writer">The destination writer.</param>
            <param name="instance">The instance to serialize.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForSerialization.Serialize(ExtendedXmlSerializer.IExtendedXmlSerializer,System.Xml.XmlWriterSettings,System.IO.TextWriter,System.Object)">
            <summary>
            Serialization convenience method to serialize the provided instance into the provided destination
            <see cref="T:System.IO.TextWriter"/> while using the settings configured in the provided <see cref="T:System.Xml.XmlWriterSettings"/>.
            </summary>
            <param name="this">The serializer to use for serialization.</param>
            <param name="settings">The writer settings for handling the xml writer used create the resulting Xml.</param>
            <param name="writer">The destination writer.</param>
            <param name="instance">The instance to serialize.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForSerialization.Deserialize``1(ExtendedXmlSerializer.IExtendedXmlSerializer,System.String)">
            <summary>
            Deserialization convenience method to deserialize a document found within the provided string into an instance of
            the requested instance type, using reader settings that will close the stream once the process is complete.
            </summary>
            <typeparam name="T">The requested instance type.</typeparam>
            <param name="this">The serializer to create the requested instance.</param>
            <param name="data">A text representation of an Xml document.</param>
            <returns>An instance of the requested type.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForSerialization.Deserialize``1(ExtendedXmlSerializer.IExtendedXmlSerializer,System.Xml.XmlReaderSettings,System.String)">
            <summary>
            Deserialization convenience method to deserialize a document found within the provided string into an instance of
            the requested instance type, using the provided <see cref="T:System.Xml.XmlReaderSettings"/>.
            </summary>
            <typeparam name="T">The requested instance type.</typeparam>
            <param name="this">The serializer to create the requested instance.</param>
            <param name="settings">The reader settings for handling the xml reader used create the instance.</param>
            <param name="data">A text representation of an Xml document.</param>
            <returns>An instance of the requested type.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForSerialization.Deserialize``1(ExtendedXmlSerializer.IExtendedXmlSerializer,System.IO.Stream)">
            <summary>
            Deserialization convenience method to deserialize a document found within the provided <see cref="T:System.IO.Stream"/> into
            an instance of the requested instance type, using the default reader settings found at
            <see cref="P:ExtendedXmlSerializer.ExtensionModel.Xml.Defaults.ReaderSettings"/>.
            </summary>
            <typeparam name="T">The requested instance type.</typeparam>
            <param name="this">The serializer to create the requested instance.</param>
            <param name="stream">The stream containing the necessary data to deserialize the object of requested type.</param>
            <returns>An instance of the requested type.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForSerialization.Deserialize``1(ExtendedXmlSerializer.IExtendedXmlSerializer,System.Xml.XmlReaderSettings,System.IO.Stream)">
            <summary>
            Deserialization convenience method to deserialize a document found within the provided <see cref="T:System.IO.Stream"/> into
            an instance of the requested instance type, using the provided <see cref="T:System.Xml.XmlReaderSettings"/>.
            </summary>
            <typeparam name="T">The requested instance type.</typeparam>
            <param name="this">The serializer to create the requested instance.</param>
            <param name="settings">The reader settings for handling the xml reader used create the instance.</param>
            <param name="stream">The stream containing the necessary data to deserialize the object of requested type.</param>
            <returns>An instance of the requested type.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForSerialization.Deserialize``1(ExtendedXmlSerializer.IExtendedXmlSerializer,System.IO.TextReader)">
            <summary>
            Deserialization convenience method to deserialize a document found within the provided <see cref="T:System.IO.TextReader"/>
            into an instance of the requested instance type, using the default reader settings found at
            <see cref="P:ExtendedXmlSerializer.ExtensionModel.Xml.Defaults.ReaderSettings"/>.
            </summary>
            <typeparam name="T">The requested instance type.</typeparam>
            <param name="this">The serializer to create the requested instance.</param>
            <param name="reader">The reader containing the necessary data to deserialize the object of requested type.</param>
            <returns>An instance of the requested type.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForSerialization.Deserialize``1(ExtendedXmlSerializer.IExtendedXmlSerializer,System.Xml.XmlReaderSettings,System.IO.TextReader)">
            <summary>
            Deserialization convenience method to deserialize a document found within the provided <see cref="T:System.IO.TextReader"/>
            into an instance of the requested instance type, using the provided <see cref="T:System.Xml.XmlReaderSettings"/>.
            </summary>
            <typeparam name="T">The requested instance type.</typeparam>
            <param name="this">The serializer to create the requested instance.</param>
            <param name="settings">The reader settings for handling the xml reader used create the instance.</param>
            <param name="reader">The reader containing the necessary data to deserialize the object of requested type.</param>
            <returns>An instance of the requested type.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForSerialization.Create``1(``0,System.Func{``0,ExtendedXmlSerializer.Configuration.IConfigurationContainer})">
            <exclude />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionMethodsForXml">
            <summary>
            Extension methods that assist or enable functionality found within the extension model namespace for xml-specific
            behaviors (<see cref="N:ExtendedXmlSerializer.ExtensionModel.Xml"/>).
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForXml.UseAutoFormatting(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            Configures the provided configuration container to create a serializer that automatically formats its contents
            into attributes and elements.  When a serializer encounters a primitive type (or more accurately, a type that has
            an <see cref="T:ExtendedXmlSerializer.ContentModel.Conversion.IConverter"/> registered to handle it), it will automatically serialize its resulting (string) data
            as an Xml attribute.  The only exception is when a <see cref="T:System.String"/> is encountered, where it will check its
            length.  Strings greater than 128 characters will be emitted as inner content.  Otherwise, it will be emitted as
            an Xml attribute.
            </summary>
            <param name="this">The configuration container to configure.</param>
            <returns>The configured configuration container.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForXml.UseAutoFormatting(ExtendedXmlSerializer.Configuration.IConfigurationContainer,System.Int32)">
            <summary>
            Configures the provided configuration container to create a serializer that automatically formats its contents
            into attributes and elements.  When a serializer encounters a primitive type (or more accurately, a type that has
            an <see cref="T:ExtendedXmlSerializer.ContentModel.Conversion.IConverter"/> registered to handle it), it will automatically serialize its resulting (string) data
            as an Xml attribute.  The only exception is when a <see cref="T:System.String"/> is encountered, where it will check its
            length.  Strings greater than the provided max-length will be emitted as inner content.  Otherwise, it will be
            emitted as an Xml attribute.
            </summary>
            <param name="this">The configuration container to configure.</param>
            <param name="maxTextLength">The max length a string can be before it is rendered as inner content.  Any string
            shorter than this amount will be rendered as an Xml attribute.</param>
            <returns>The configured configuration container.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForXml.UseOptimizedNamespaces(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            Configures the container to create a serializer that consolidates all namespaces so that they emit at the root of
            the document, rather than throughout the document when they are first encountered (which can lead to a lot of
            unnecessary overhead and larger documents).
            </summary>
            <param name="this">The configuration container to configure.</param>
            <returns>The configured configuration container.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForXml.WithValidCharacters(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            Ensures that all text and strings encountered when emitting the document are valid Xml characters, replacing those
            that are not with empty strings.
            </summary>
            <param name="this">The configuration container to configure.</param>
            <returns>The configured configuration container.</returns>
            <seealso href="https://stackoverflow.com/a/961504/3602057"/>
            <seealso href="https://github.com/ExtendedXmlSerializer/home/issues/167" />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForXml.UseClassicSerialization``1(ExtendedXmlSerializer.Configuration.ITypeConfiguration{``0})">
            <summary>
            Used in dire circumstances.  If you encounter an older .NET object type that cannot be serialized (e.g.
            DataTable), and it implements <see cref="T:System.Runtime.Serialization.ISerializable"/>, call this method to configure the container to create a
            serializer that will serialize and deserialize using this interface.
            </summary>
            <typeparam name="T">The type under configuration.</typeparam>
            <param name="this">The type configuration to configure.</param>
            <returns>The configured type configuration.</returns>
            <seealso href="https://github.com/ExtendedXmlSerializer/home/issues/268" />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForXml.WithValidCharacters``1(ExtendedXmlSerializer.Configuration.IMemberConfiguration{``0,System.String})">
            <summary>
            Ensures that all text and strings encountered when emitting the specified member are valid Xml characters,
            replacing those that are not with empty strings.
            </summary>
            <typeparam name="T">The member's containing type.</typeparam>
            <param name="this">The member configuration to configure.</param>
            <returns>The configured member configuration.</returns>
            <seealso href="https://stackoverflow.com/a/961504/3602057"/>
            <seealso href="https://github.com/ExtendedXmlSerializer/home/issues/167" />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForXml.Attribute``2(ExtendedXmlSerializer.Configuration.IMemberConfiguration{``0,``1})">
            <summary>
            Configures the specified member to emit as an Xml attribute, rather than as an element.
            </summary>
            <typeparam name="T">The member's containing type.</typeparam>
            <typeparam name="TMember">The value type of the member.</typeparam>
            <param name="this">The member configuration to configure.</param>
            <returns>The configured member configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForXml.Attribute``2(ExtendedXmlSerializer.Configuration.IMemberConfiguration{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Configures the specified member to emit as an Xml attribute when the provided condition is met, rather than as an
            element.  When the provided condition delegate evaluates as true, the member is emitted as an Xml attribute.
            Otherwise, it emits as an Xml element.
            </summary>
            <typeparam name="T">The member's containing type.</typeparam>
            <typeparam name="TMember">The value type of the member.</typeparam>
            <param name="this">The member configuration to configure.</param>
            <param name="when">The condition used to specify when to render this member as an Xml attribute.</param>
            <returns>The configured member configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForXml.Content``2(ExtendedXmlSerializer.Configuration.IMemberConfiguration{``0,``1})">
            <summary>
            Forces a member to emit as an Xml element.  This is only useful if a member was registered as an attribute and for
            some reason the member should be further configured to emit as an Xml element instead (effectively delisting it as
            an Xml attribute).  Otherwise, emitting as an Xml element is the default behavior and this method should not be used.
            </summary>
            <typeparam name="T">The member's containing type.</typeparam>
            <typeparam name="TMember">The value type of the member.</typeparam>
            <param name="this">The member configuration to configure.</param>
            <returns>The configured member configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForXml.Verbatim``1(ExtendedXmlSerializer.Configuration.IMemberConfiguration{``0,System.String})">
            <summary>
            Forces a member to emit within a CDATA container so it can render its contents verbatim.
            </summary>
            <typeparam name="T">The member's containing type.</typeparam>
            <param name="this">The member configuration to configure.</param>
            <returns>The configured member configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForXml.CustomSerializer``2(ExtendedXmlSerializer.Configuration.IConfigurationContainer)">
            <summary>
            This is considered v1 functionality and is not supported, although it is not yet considered deprecated.  Please
            make use of the registration methods instead.  The current equivalent for this method call is
            `IConfigurationContainer.Type{T}.Register().Serializer().Of{TSerializer}`.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TSerializer"></typeparam>
            <param name="this"></param>
            <returns></returns>
            <seealso cref="M:ExtendedXmlSerializer.Configuration.TypeSerializationRegistrationContext`1.Of``1"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForXml.CustomSerializer``1(ExtendedXmlSerializer.Configuration.IConfigurationContainer,System.Type)">
            <summary>
            This is considered v1 functionality and is not supported, although it is not yet considered deprecated.  Please
            make use of the registration methods instead.  The current equivalent for this method call is
            `IConfigurationContainer.Type{T}.Register().Serializer().Of(serializerType)`.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="serializerType"></param>
            <returns></returns>
            <seealso cref="M:ExtendedXmlSerializer.Configuration.TypeSerializationRegistrationContext`1.Of(System.Type)"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForXml.CustomSerializer``1(ExtendedXmlSerializer.Configuration.ITypeConfiguration{``0},System.Action{System.Xml.XmlWriter,``0},System.Func{System.Xml.Linq.XElement,``0})">
            <summary>
            This is considered v1 functionality and is not supported, although it is not yet considered deprecated.  Please
            make use of the registration methods instead.  The current equivalent for this method call is
            `IConfigurationContainer.Type{T}.Register().Serializer().ByCalling(serializer, deserializer)`.  Note that the
            signatures for the delegates have changed since v1.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="serializer"></param>
            <param name="deserialize"></param>
            <returns></returns>
            <seealso cref="M:ExtendedXmlSerializer.Configuration.TypeSerializationRegistrationContext`1.ByCalling(System.Action{ExtendedXmlSerializer.ContentModel.Format.IFormatWriter,`0},System.Func{ExtendedXmlSerializer.ContentModel.Format.IFormatReader,`0})"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForXml.CustomSerializer``1(ExtendedXmlSerializer.Configuration.ITypeConfiguration{``0},ExtendedXmlSerializer.ExtensionModel.Xml.IExtendedXmlCustomSerializer{``0})">
            <summary>
            This is considered v1 functionality and is not supported, although it is not yet considered deprecated.  Please
            make use of the registration methods instead.  The current equivalent for this method call is
            `IConfigurationContainer.Type{T}.Register().Serializer().Using(serializer)`.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="serializer"></param>
            <returns></returns>
            <seealso cref="M:ExtendedXmlSerializer.Configuration.TypeSerializationRegistrationContext`1.Using(ExtendedXmlSerializer.ContentModel.ISerializer{`0})"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForXml.CustomSerializer``1(ExtendedXmlSerializer.Configuration.ITypeConfiguration{``0},ExtendedXmlSerializer.ExtensionModel.Xml.IExtendedXmlCustomSerializer)">
            <summary>
            This is considered v1 functionality and is not supported, although it is not yet considered deprecated.  Please
            make use of the registration methods instead.  The current equivalent for this method call is
            `IConfigurationContainer.Type{T}.Register().Serializer().Using(serializer)`.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="serializer"></param>
            <returns></returns>
            <seealso cref="M:ExtendedXmlSerializer.Configuration.TypeSerializationRegistrationContext`1.Using(ExtendedXmlSerializer.ContentModel.ISerializer)"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForXml.AddMigration``1(ExtendedXmlSerializer.Configuration.ITypeConfiguration{``0},ExtendedXmlSerializer.Core.ICommand{System.Xml.Linq.XElement})">
            <summary>
            Adds a migration command to the configured type.  A migration allows older persisted XML to migrate to an object
            model schema that has changed since the XML was persisted.  The provided command specifies how to manipulate the
            element that represents the type so that it can (hopefully 😇) be deserialized without error.
            </summary>
            <typeparam name="T">The type under configuration.</typeparam>
            <param name="this">The type configuration to configure.</param>
            <param name="migration">The command that specifies how to migrate an Xml element that represents an older schema.</param>
            <returns>The configured type configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForXml.AddMigration``1(ExtendedXmlSerializer.Configuration.ITypeConfiguration{``0},System.Action{System.Xml.Linq.XElement})">
            <summary>
            Adds a migration delegate to the configured type.  A migration allows older persisted XML to migrate to an object
            model schema that has changed since the XML was persisted.  The provided command specifies how to manipulate the
            element that represents the type so that it can (hopefully 😇) be deserialized without error.
            </summary>
            <typeparam name="T">The type under configuration.</typeparam>
            <param name="this">The type configuration to configure.</param>
            <param name="migration">The delegate that specifies how to migrate an Xml element that represents an older schema.
            </param>
            <returns>The configured type configuration.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionMethodsForXml.AddMigration``1(ExtendedXmlSerializer.Configuration.ITypeConfiguration{``0},System.Collections.Generic.IEnumerable{System.Action{System.Xml.Linq.XElement}})">
            <summary>
            Adds a set of migration delegates to the configured type.  A migration allows older persisted XML to migrate to an
            object model schema that has changed since the XML was persisted.  The provided command specifies how to
            manipulate the element that represents the type so that it can (hopefully 😇) be deserialized without error.
            </summary>
            <typeparam name="T">The type under configuration.</typeparam>
            <param name="this">The type configuration to configure.</param>
            <param name="migrations">The delegates that specify how to migrate an Xml element that represents an older schema.
            </param>
            <returns>The configured type configuration.</returns>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.AttachedProperties.IProperty">
            <summary>
            Represents an attached property.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.AttachedProperties.IProperty.Metadata">
            <summary>
            The metadata of the property that this attached property represents.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.AttachedProperties.Property`2">
            <summary>
            A baseline property component that represents an attached property.
            </summary>
            <typeparam name="TType">The hosting type.</typeparam>
            <typeparam name="TValue">The property's value.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.AttachedProperties.Property`2.#ctor(ExtendedXmlSerializer.Core.Sources.ITableSource{`0,`1},System.Linq.Expressions.Expression{System.Func{ExtendedXmlSerializer.ExtensionModel.AttachedProperties.IProperty}})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="store"></param>
            <param name="source"></param>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.AttachedProperties.Property`2.#ctor(ExtendedXmlSerializer.Core.Specifications.ISpecification{System.Reflection.TypeInfo},ExtendedXmlSerializer.Core.Sources.ITableSource{`0,`1},System.Linq.Expressions.Expression{System.Func{ExtendedXmlSerializer.ExtensionModel.AttachedProperties.IProperty}})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="specification"></param>
            <param name="store"></param>
            <param name="source"></param>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.AttachedProperties.Property`2.Metadata">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.AttachedProperties.Property`2.IsSatisfiedBy(`0)">
            <inheritdoc cref="T:ExtendedXmlSerializer.Core.Specifications.ISpecification`1" />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.AttachedProperties.Property`2.Get(`0)">
            <inheritdoc cref="T:ExtendedXmlSerializer.Core.Sources.ITableSource`2" />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.AttachedProperties.Property`2.Assign(`0,`1)">
            <inheritdoc cref="T:ExtendedXmlSerializer.Core.Sources.ITableSource`2" />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.AttachedProperties.Property`2.Get">
            <inheritdoc cref="T:ExtendedXmlSerializer.Core.Sources.ISource`1" />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.AttachedProperties.Property`2.IsSatisfiedBy(System.Reflection.TypeInfo)">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.AttachedProperties.Property`2.Remove(`0)">
            <inheritdoc cref="T:ExtendedXmlSerializer.Core.Sources.ITableSource`2" />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.AttachedProperties.ReferenceProperty`2">
            <summary>
            Represents a referenced-based attached property.
            </summary>
            <typeparam name="TType">The hosting type.</typeparam>
            <typeparam name="TValue">The property's value.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.AttachedProperties.ReferenceProperty`2.#ctor(System.Linq.Expressions.Expression{System.Func{ExtendedXmlSerializer.ExtensionModel.AttachedProperties.IProperty}})">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.AttachedProperties.ReferenceProperty`2.#ctor(System.Linq.Expressions.Expression{System.Func{ExtendedXmlSerializer.ExtensionModel.AttachedProperties.IProperty}},System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.AttachedProperties.StructureProperty`2">
            <summary>
            Represents a structure-based attached property.
            </summary>
            <typeparam name="TType">The hosting type.</typeparam>
            <typeparam name="TValue">The property's value.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.AttachedProperties.StructureProperty`2.#ctor(System.Linq.Expressions.Expression{System.Func{ExtendedXmlSerializer.ExtensionModel.AttachedProperties.IProperty}})">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.AttachedProperties.StructureProperty`2.#ctor(System.Linq.Expressions.Expression{System.Func{ExtendedXmlSerializer.ExtensionModel.AttachedProperties.IProperty}},System.Func{`0,`1})">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.CachingExtension">
            <summary>
            Used to cache commonly used components that are selected during serialization.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.CachingExtension.Default">
            <summary>
            The default instance with a default sort of 10.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.CachingExtension.#ctor(System.Int32)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="sort">The instance sort value.</param>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.CachingExtension.Sort">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.CachingExtension.Get(ExtendedXmlSerializer.ExtensionModel.IServiceRepository)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Content.ContentModelExtension">
            <summary>
            A default serializer extension. This configures the content model, and registers all necessary components to
            resolve serializers for different types of content.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.Content.ContentModelExtension.Default">
            <summary>
            The default instance.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Content.ContentModelExtension.#ctor(ExtendedXmlSerializer.ContentModel.Content.IContentReaders,ExtendedXmlSerializer.ContentModel.Content.IContentWriters)">
            <summary>
            Initializes a new instance of the <see cref="T:ExtendedXmlSerializer.ExtensionModel.Content.ContentModelExtension"/> class.
            </summary>
            <param name="readers">The readers.</param>
            <param name="writers">The writers.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Content.ContentModelExtension.Get(ExtendedXmlSerializer.ExtensionModel.IServiceRepository)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Content.Contents">
            <summary>
            A default serializer extension.  This extension defines necessary default components for rendering contents of different content types, such as dictionaries and arrays, etc.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.Content.Contents.Default">
            <summary>
            The default instance.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Content.Contents.Get(ExtendedXmlSerializer.ExtensionModel.IServiceRepository)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Content.ContentsHistory">
            <inheritdoc cref="T:ExtendedXmlSerializer.ExtensionModel.Content.IContentsHistory" />
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.Content.ContentsHistory.Default">
            <summary>
            The default instance.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Content.ConvertersExtension">
            <summary>
            A default serializer extension that manages the registration of converters used by generated serializers.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Content.ConvertersExtension.#ctor">
            <summary>
            Creates an instance.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Content.ConvertersExtension.#ctor(System.Collections.Generic.ICollection{ExtendedXmlSerializer.ContentModel.Conversion.IConverter})">
            <summary>
            Initializes a new instance of the <see cref="T:ExtendedXmlSerializer.ExtensionModel.Content.ConvertersExtension"/> class.
            </summary>
            <param name="converters">The converters.</param>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.Content.ConvertersExtension.Converters">
            <summary>
            Current registry of converters.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Content.ConvertersExtension.Get(ExtendedXmlSerializer.ExtensionModel.IServiceRepository)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Content.IContentsHistory">
            <summary>
            Component used to "walk the stack up" in the history of deserialized content.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Content.ISerializerComposer">
            <summary>
            Component used to alter content serializers created by the root serializer.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Content.ISerializerComposer`1">
            <summary>
            Component used to alter content serializers created by the root serializer.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Content.ITypedSpecifications">
            <summary>
            A store of type specifications, keyed by type metdata.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Content.Members.AllowedMembersExtension">
            <summary>
            A default extension that is used to determine which members are allowed to be considered for serialization and
            deserialization.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Content.Members.AllowedMembersExtension.#ctor(ExtendedXmlSerializer.ContentModel.Members.IMetadataSpecification)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="specification"></param>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Content.Members.AllowedMembersExtension.#ctor(ExtendedXmlSerializer.ContentModel.Members.IMetadataSpecification,System.Collections.Generic.ICollection{System.Reflection.MemberInfo},System.Collections.Generic.ICollection{System.Reflection.MemberInfo})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="specification"></param>
            <param name="blacklist"></param>
            <param name="whitelist"></param>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.Content.Members.AllowedMembersExtension.Blacklist">
            <summary>
            List of prohibited members.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.Content.Members.AllowedMembersExtension.Whitelist">
            <summary>
            List of allowed members.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Content.Members.AllowedMembersExtension.Get(ExtendedXmlSerializer.ExtensionModel.IServiceRepository)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Content.Members.AllowedMemberValuesExtension">
            <summary>
            Default serializer extension that configures when to allow, emit, and read values of members.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Content.Members.AllowedMemberValuesExtension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ExtendedXmlSerializer.ExtensionModel.Content.Members.AllowedMemberValuesExtension"/> class.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Content.Members.AllowedMemberValuesExtension.#ctor(ExtendedXmlSerializer.ContentModel.Members.IAllowedValueSpecification)">
            <summary>
            Initializes a new instance of the <see cref="T:ExtendedXmlSerializer.ExtensionModel.Content.Members.AllowedMemberValuesExtension"/> class.
            </summary>
            <param name="allowed">The allowed.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Content.Members.AllowedMemberValuesExtension.#ctor(ExtendedXmlSerializer.ContentModel.Members.IAllowedValueSpecification,System.Collections.Generic.IDictionary{System.Reflection.MemberInfo,ExtendedXmlSerializer.ContentModel.Members.IAllowedValueSpecification},ExtendedXmlSerializer.ContentModel.Members.IAllowedMemberValues[])">
            <summary>
            Initializes a new instance of the <see cref="T:ExtendedXmlSerializer.ExtensionModel.Content.Members.AllowedMemberValuesExtension"/> class.
            </summary>
            <param name="allowed">The allowed.</param>
            <param name="specifications">The specifications.</param>
            <param name="items">The items.</param>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.Content.Members.AllowedMemberValuesExtension.Specifications">
            <summary>
            Registry of allowed value specifications, keyed by member metadata.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.Content.Members.AllowedMemberValuesExtension.Instances">
            <summary>
            Registry of instance value specifications, keyed by member metadata.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Content.Members.AllowedMemberValuesExtension.Get(ExtendedXmlSerializer.ExtensionModel.IServiceRepository)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Content.Members.IMemberSpecification">
            <summary>
            Specialized specification for members.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Content.Members.IMemberSpecifications">
            <summary>
            Represents a source of member specifications.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Content.Members.IsValidMemberType">
            <summary>
            Used to determine if a member is valid.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Content.Members.IsValidMemberType.#ctor(ExtendedXmlSerializer.ContentModel.Members.IMetadataSpecification)">
            <summary>
            Initializes a new instance of the <see cref="T:ExtendedXmlSerializer.ExtensionModel.Content.Members.IsValidMemberType"/> class.
            </summary>
            <param name="specification">The specification.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Content.Members.IsValidMemberType.IsSatisfiedBy(ExtendedXmlSerializer.ContentModel.Members.IMember)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Content.Members.IsWritable">
            <summary>
            Convenience component that encapsulates a query for the <see cref="P:ExtendedXmlSerializer.ContentModel.Members.IMember.IsWritable"/> property.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.Content.Members.IsWritable.Default">
            <summary>
            The default instance.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Content.Members.MemberModelExtension">
            <summary>
            Default serializer extension that configures the member model for selecting appropriate serializers for members, as
            well as accessing member values.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.Content.Members.MemberModelExtension.Default">
            <summary>
            The default instance.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Content.Members.MemberModelExtension.Get(ExtendedXmlSerializer.ExtensionModel.IServiceRepository)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Content.Members.MemberPropertiesExtension">
            <summary>
            Default serializer extension that is used to configure member properties such as name and ordering.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Content.Members.MemberPropertiesExtension.#ctor(ExtendedXmlSerializer.ContentModel.Members.INames,ExtendedXmlSerializer.Core.Sources.IParameterizedSource{System.Reflection.MemberInfo,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:ExtendedXmlSerializer.ExtensionModel.Content.Members.MemberPropertiesExtension"/> class.
            </summary>
            <param name="defaultNames">The default names.</param>
            <param name="defaultMemberOrder">The default member order.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Content.Members.MemberPropertiesExtension.#ctor(System.Collections.Generic.IDictionary{System.Reflection.MemberInfo,System.String},System.Collections.Generic.IDictionary{System.Reflection.MemberInfo,System.Int32},ExtendedXmlSerializer.ContentModel.Members.INames,ExtendedXmlSerializer.Core.Sources.IParameterizedSource{System.Reflection.MemberInfo,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:ExtendedXmlSerializer.ExtensionModel.Content.Members.MemberPropertiesExtension"/> class.
            </summary>
            <param name="names">The names.</param>
            <param name="order">The order.</param>
            <param name="defaultNames">The default names.</param>
            <param name="defaultMemberOrder">The default member order.</param>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.Content.Members.MemberPropertiesExtension.Names">
            <summary>
            A registry of text names, keyed by member metadata.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.Content.Members.MemberPropertiesExtension.Order">
            <summary>
            A registry of member order values, keyed on member metadata.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Content.Members.MemberPropertiesExtension.Get(ExtendedXmlSerializer.ExtensionModel.IServiceRepository)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Content.VersionConverter">
            <summary>
            Converter for <see cref="T:System.Version"/> instances.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.Content.VersionConverter.Default">
            <summary>
            The default instance.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.DefaultExtensions">
            <summary>
            Compiles a list of default extensions used in the configuration container.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.DefaultExtensions.Default">
            <summary>
            The default instance.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.DefaultExtensions.#ctor(ExtendedXmlSerializer.ContentModel.Members.IMetadataSpecification,ExtendedXmlSerializer.ContentModel.Members.INames,ExtendedXmlSerializer.Core.Sources.IParameterizedSource{System.Reflection.MemberInfo,System.Int32})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="metadata">The metadata specification used to create a <see cref="T:ExtendedXmlSerializer.ExtensionModel.Content.Members.AllowedMembersExtension"/>.</param>
            <param name="defaultNames">The default names selector for element and attribute names.</param>
            <param name="defaultMemberOrder">The order selector to use when a <see cref="T:System.Reflection.MemberInfo"/> is encountered and
            selected.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.DefaultExtensions.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Encryption.IDecrypt">
            <summary>
            Used to decrypt a string from encrypted input to decrypted output.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Encryption.IEncrypt">
            <summary>
            Used to encrypt a string from its plain text input to encrypted output.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Encryption.IEncryption">
            <summary>
            A converter used to encrypt and decrypt values.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.FallbackSerializationExtension">
            <summary>
            Configures a serializer so that if an exception occcurs during selection of a serializer for a given type, a
            provided fallback serializer is selected instead.  By default the provided fallback serializer does nothing for
            serializer and returns a null instance for deserialization.
            </summary>
            <seealso href="https://github.com/ExtendedXmlSerializer/home/issues/197"/>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.FallbackSerializationExtension.Default">
            <summary>
            The default instance.  By default the provided fallback serializer does nothing for
            serializer and returns a null instance for deserialization.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.FallbackSerializationExtension.#ctor(ExtendedXmlSerializer.ExtensionModel.FallbackSerializationExtension.IFallbackSerializer)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="fallback">The fallback serializer to use in case an exception is thrown during serialzer selection..
            </param>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.FallbackSerializationExtension.Get(ExtendedXmlSerializer.ExtensionModel.IServiceRepository)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.FallbackSerializationExtension.IFallbackSerializer">
            <summary>
            Used to register a specific serializer with the container so that it is used for fall back serialization.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Instances.ISerializationMonitor">
            <summary>
            Provides a generalized mechanism to listen in to important events during the serialization process.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Instances.ISerializationMonitor`1">
            <summary>
            Provides a mechanism to listen in to important events during the serialization process.
            </summary>
            <typeparam name="T">The type to monitor.</typeparam>
            <seealso href="https://github.com/ExtendedXmlSerializer/home/issues/264#issuecomment-544104668"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Instances.ISerializationMonitor`1.OnSerializing(ExtendedXmlSerializer.ContentModel.Format.IFormatWriter,`0)">
            <summary>
            Called when an instance is about to be serialized.
            </summary>
            <param name="writer">The writer performing the writing to the destination.</param>
            <param name="instance">The instance about to be serialized.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Instances.ISerializationMonitor`1.OnSerialized(ExtendedXmlSerializer.ContentModel.Format.IFormatWriter,`0)">
            <summary>
            Called when an instance is serialized.
            </summary>
            <param name="writer">The writer performing the writing to the destination.</param>
            <param name="instance">The instance that was serialized.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Instances.ISerializationMonitor`1.OnDeserializing(ExtendedXmlSerializer.ContentModel.Format.IFormatReader,System.Type)">
            <summary>
            Called when a reader is about to deserialize an identified type.
            </summary>
            <param name="reader">The reader representing the source document.</param>
            <param name="instanceType">The identified type about to be deserialized.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Instances.ISerializationMonitor`1.OnActivating(ExtendedXmlSerializer.ContentModel.Format.IFormatReader,System.Type)">
            <summary>
            Called when a particular type is about to be activated/instantiated.
            </summary>
            <param name="reader">The reader representing the source document.</param>
            <param name="instanceType">The identified type about to be activated.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Instances.ISerializationMonitor`1.OnActivated(`0)">
            <summary>
            Called when an instance of the monitored type is activated/instantiated.
            </summary>
            <param name="instance">Instance that was activated.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Instances.ISerializationMonitor`1.OnDeserialized(ExtendedXmlSerializer.ContentModel.Format.IFormatReader,`0)">
            <summary>
            Called when an instance has been fully deserialized.
            </summary>
            <param name="reader">The reader representing the source document.</param>
            <param name="instance">The instance that was deserialized.</param>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.IRegistration">
            <summary>
            An specialized alteration that is intended to alter a service repository.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.IRootInstances">
            <summary>
            A specialized selector that is intended to retrieve the root instance provided during serialization with the
            <see cref="M:ExtendedXmlSerializer.ExtensionModel.Xml.ISerializer.Serialize(System.Xml.XmlWriter,System.Object)" /> call.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.ISerializerExtension">
            <summary>
            The heart and soul of the extension model.  This performs any registrations during serializer activation and once
            the serializer is created, performs any necessary post-processing with its <see cref="T:ExtendedXmlSerializer.Core.ICommand`1"/>
            implementation.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.IServiceProvider">
            <summary>
            A general purpose component that is intended for service location.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceProvider.GetInstance(System.Type)">
            <summary>
            Gets a component found with the requested type.
            </summary>
            <param name="serviceType">The requested type.</param>
            <returns>The instance found with the requested type.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceProvider.GetInstance(System.Type,System.Object[])">
            <summary>
            Gets a component found with the requested type and argument values.
            </summary>
            <param name="serviceType">The requested type.</param>
            <param name="arguments">A set of arguments to provide for construction.</param>
            <returns>The instance found with the requested information.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceProvider.GetInstance(System.Type,System.String,System.Object[])">
            <summary>
            Gets a component found with the requested type, name, and argument values.
            </summary>
            <param name="serviceType">The requested type.</param>
            <param name="serviceName">The unique name for service location.</param>
            <param name="arguments">A set of arguments to provide for construction.</param>
            <returns>The instance found with the requested information.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceProvider.GetInstance(System.Type,System.String)">
            <summary>
            Gets a component found with the requested type and name.
            </summary>
            <param name="serviceType">The requested type.</param>
            <param name="serviceName">The unique name for service location.</param>
            <returns>The instance found with the requested information.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceProvider.TryGetInstance(System.Type)">
            <summary>
            Tries to get an instance with the requested type.
            </summary>
            <param name="serviceType">The requested type.</param>
            <returns>The instance found with the requested information.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceProvider.TryGetInstance(System.Type,System.String)">
            <summary>
            Tries to get an instance with the requested type and name.
            </summary>
            <param name="serviceType">The requested type.</param>
            <param name="serviceName">The unique name for service location.</param>
            <returns>The instance found with the requested information.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceProvider.GetAllInstances(System.Type)">
            <summary>
            Gets all instance that are registered with the requested type.
            </summary>
            <param name="serviceType">The requested type.</param>
            <returns>All located instances registered with the requested type.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceProvider.Create(System.Type)">
            <summary>
            Instantiates a new isntance of the requested type.
            </summary>
            <param name="serviceType">The requested type.</param>
            <returns>A new instance.</returns>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.IServiceRepository">
            <summary>
            Custom service registry.  Modeled after <see cref="T:LightInject.IServiceRegistry"/>.  If designed today, we would remove this
            interface with the LightInject version.  Perhaps in a future version we will do this as a breaking change.  For the
            default implementation, most calls pass through directly to the underlying LightInject equivalent.  For those
            operations that require a <see cref="T:LightInject.ILifetime"/>, a <see cref="T:LightInject.PerContainerLifetime"/> is used.
            </summary>
            <seealso cref="T:LightInject.IServiceRegistry"/>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.IServiceRepository.AvailableServices">
            <seealso cref="P:LightInject.IServiceRegistry.AvailableServices"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceRepository.Register(System.Type,System.Type)">
            <seealso cref="M:LightInject.IServiceRegistry.Register(System.Type,System.Type)"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceRepository.Register(System.Type,System.Type,System.String)">
            <seealso cref="M:LightInject.IServiceRegistry.Register(System.Type,System.Type,System.String)"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceRepository.Register``2">
            <seealso cref="M:LightInject.IServiceRegistry.Register``2"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceRepository.Register``2(System.String)">
            <seealso cref="M:LightInject.IServiceRegistry.Register``2(System.String)"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceRepository.Register``1">
            <seealso cref="M:LightInject.IServiceRegistry.Register``1"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceRepository.RegisterInstance``1(``0)">
            <seealso cref="M:LightInject.IServiceRegistry.RegisterInstance``1(``0)"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceRepository.RegisterInstance``1(``0,System.String)">
            <seealso cref="M:LightInject.IServiceRegistry.RegisterInstance``1(``0,System.String)"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceRepository.RegisterInstance(System.Type,System.Object)">
            <seealso cref="M:LightInject.IServiceRegistry.RegisterInstance(System.Type,System.Object)"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceRepository.RegisterInstance(System.Type,System.Object,System.String)">
            <seealso cref="M:LightInject.IServiceRegistry.RegisterInstance(System.Type,System.Object,System.String)"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceRepository.Register(System.Type)">
            <seealso cref="M:LightInject.IServiceRegistry.RegisterInstance(System.Type,System.Object)"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceRepository.Register``1(System.Func{ExtendedXmlSerializer.ExtensionModel.IServiceProvider,``0})">
            <remarks>Uses a <see cref="T:LightInject.PerContainerLifetime"/> instance for the lifetime.</remarks>
            <seealso cref="M:LightInject.IServiceRegistry.Register``1(System.Func{LightInject.IServiceFactory,``0},LightInject.ILifetime)"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceRepository.Register``2(System.Func{ExtendedXmlSerializer.ExtensionModel.IServiceProvider,``0,``1})">
            <seealso cref="M:LightInject.IServiceRegistry.Register``1(System.Func{LightInject.IServiceFactory,``0},LightInject.ILifetime)"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceRepository.Register``2(System.Func{ExtendedXmlSerializer.ExtensionModel.IServiceProvider,``0,``1},System.String)">
            <seealso cref="M:LightInject.IServiceRegistry.Register``2(System.Func{LightInject.IServiceFactory,``0,``1},System.String)"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceRepository.Register``3(System.Func{ExtendedXmlSerializer.ExtensionModel.IServiceProvider,``0,``1,``2})">
            <seealso cref="M:LightInject.IServiceRegistry.Register``3(System.Func{LightInject.IServiceFactory,``0,``1,``2})"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceRepository.Register``3(System.Func{ExtendedXmlSerializer.ExtensionModel.IServiceProvider,``0,``1,``2},System.String)">
            <seealso cref="M:LightInject.IServiceRegistry.Register``3(System.Func{LightInject.IServiceFactory,``0,``1,``2},System.String)"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceRepository.Register``4(System.Func{ExtendedXmlSerializer.ExtensionModel.IServiceProvider,``0,``1,``2,``3})">
            <seealso cref="M:LightInject.IServiceRegistry.Register``4(System.Func{LightInject.IServiceFactory,``0,``1,``2,``3})"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceRepository.Register``4(System.Func{ExtendedXmlSerializer.ExtensionModel.IServiceProvider,``0,``1,``2,``3},System.String)">
            <seealso cref="M:LightInject.IServiceRegistry.Register``4(System.Func{LightInject.IServiceFactory,``0,``1,``2,``3},System.String)"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceRepository.Register``5(System.Func{ExtendedXmlSerializer.ExtensionModel.IServiceProvider,``0,``1,``2,``3,``4})">
            <seealso cref="M:LightInject.IServiceRegistry.Register``5(System.Func{LightInject.IServiceFactory,``0,``1,``2,``3,``4})"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceRepository.Register``5(System.Func{ExtendedXmlSerializer.ExtensionModel.IServiceProvider,``0,``1,``2,``3,``4},System.String)">
            <seealso cref="M:LightInject.IServiceRegistry.Register``5(System.Func{LightInject.IServiceFactory,``0,``1,``2,``3,``4},System.String)"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceRepository.Register``1(System.Func{ExtendedXmlSerializer.ExtensionModel.IServiceProvider,``0},System.String)">
            <seealso cref="M:LightInject.IServiceRegistry.Register``1(System.Func{LightInject.IServiceFactory,``0},System.String)"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceRepository.RegisterFallback(System.Func{System.Type,System.Boolean},System.Func{System.Type,System.Object})">
            <seealso cref="M:LightInject.IServiceRegistry.RegisterFallback(System.Func{System.Type,System.String,System.Boolean},System.Func{LightInject.ServiceRequest,System.Object})"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceRepository.RegisterConstructorDependency``1(System.Func{ExtendedXmlSerializer.ExtensionModel.IServiceProvider,System.Reflection.ParameterInfo,``0})">
            <seealso cref="M:LightInject.IServiceRegistry.RegisterConstructorDependency``1(System.Func{LightInject.IServiceFactory,System.Reflection.ParameterInfo,``0})"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceRepository.RegisterConstructorDependency``1(System.Func{ExtendedXmlSerializer.ExtensionModel.IServiceProvider,System.Reflection.ParameterInfo,System.Object[],``0})">
            <seealso cref="M:LightInject.IServiceRegistry.RegisterConstructorDependency``1(System.Func{LightInject.IServiceFactory,System.Reflection.ParameterInfo,System.Object[],``0})"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceRepository.Decorate(System.Type,System.Type)">
            <seealso cref="M:LightInject.IServiceRegistry.Decorate(System.Type,System.Type)"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceRepository.Decorate``2">
            <seealso cref="M:LightInject.IServiceRegistry.Decorate``2"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.IServiceRepository.Decorate``1(System.Func{ExtendedXmlSerializer.ExtensionModel.IServiceProvider,``0,``0})">
            <seealso cref="M:LightInject.IServiceRegistry.Decorate``1(System.Func{LightInject.IServiceFactory,``0,``0})"/>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.IServices">
            <summary>
            Represents a services container for the extension model.  This is responsible for querying and registering
            services, as well as finally disposing and cleaning all resources once the serializer has been constructed.  This
            is passed in as the parameter to post-registration during the extension processing.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Markup.IMarkupExtension">
            <summary>
            Represents a markup extension, modeled after System.Xaml.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Markup.IMarkupExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            Given the service provided, retrieves a value.
            </summary>
            <param name="serviceProvider">The service provider for any necessary service location.</param>
            <returns>The resulting value of the request.</returns>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Markup.NullExtension">
            <summary>
            Markup extension to return a `null` value.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Markup.NullExtension.ProvideValue(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Markup.StaticExtension">
            <summary>
            Markup extension that resolves a static member type from a namespace and member expression.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Markup.StaticExtension.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="typeName">The expression that resolves to the type that holds the static member.</param>
            <param name="memberName">The name of the public static member.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Markup.StaticExtension.#ctor(System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="memberPath">The qualified path to the public static member.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Markup.StaticExtension.ProvideValue(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Markup.TypeExtension">
            <summary>
            Markup Extension that resolves to a type.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Markup.TypeExtension.#ctor(System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="typeName">The qualified type name.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Markup.TypeExtension.ProvideValue(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.References.DefaultReferencesExtension">
            <summary>
            A default extension that provides basic support for circular reference detection, which by default throws when it
            is encountered.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.References.DefaultReferencesExtension.#ctor">
            <summary>
             Creates a new instance with an empty blacklist.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.References.DefaultReferencesExtension.#ctor(System.Collections.Generic.ICollection{System.Reflection.TypeInfo})">
            <summary>
            Creates a new instance with the specified blacklist and empty whitelist.
            </summary>
            <param name="blacklist">The list of prohibited types.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.References.DefaultReferencesExtension.#ctor(System.Collections.Generic.ICollection{System.Reflection.TypeInfo},System.Collections.Generic.ICollection{System.Reflection.TypeInfo})">
            <summary>
            Creates a new instance with provided types.
            </summary>
            <param name="blacklist">The list of prohibited types.</param>
            <param name="whitelist">The list of allowed types.</param>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.References.DefaultReferencesExtension.Blacklist">
            <summary>
            The current list of prohibited types.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.References.DefaultReferencesExtension.Whitelist">
            <summary>
            The current list of allowed types.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.References.DefaultReferencesExtension.Get(ExtendedXmlSerializer.ExtensionModel.IServiceRepository)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.References.IReferences">
            <summary>
            Specialized selector used to access references.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Registrations`1">
            <summary>
            A collection of registrations.
            </summary>
            <typeparam name="T">The instance type to store.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Registrations`1.#ctor">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Registrations`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Registrations`1.#ctor(System.Collections.Generic.ICollection{`0},System.Collections.Generic.ICollection{System.Type})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="instances"></param>
            <param name="types"></param>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.Registrations`1.Instances">
            <summary>
            A list of instances.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.Registrations`1.Types">
            <summary>
            A list of types.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Registrations`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.SerializationExtension">
            <summary>
            A default extension that registers all necessary and fundamental components required for successful serialization
            deserialization.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.SerializationExtension.Default">
            <summary>
            The default instance.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.SerializationExtension.Get(ExtendedXmlSerializer.ExtensionModel.IServiceRepository)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Types.ImmutableArrayExtension">
            <summary>
            For extension authors, enables immutable arrays on a container.  This is a default extension used by
            <see cref="T:ExtendedXmlSerializer.ExtensionModel.DefaultExtensions"/>.
            </summary>
            <seealso cref="T:ExtendedXmlSerializer.ExtensionModel.DefaultExtensions"/>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.Types.ImmutableArrayExtension.Default">
            <summary>
            The instance.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Types.ImmutableArrayExtension.#ctor(ExtendedXmlSerializer.Core.Specifications.ISpecification{System.Reflection.TypeInfo})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="specification">The specification used to determine when to assign a serializer to a given type.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Types.ImmutableArrayExtension.Get(ExtendedXmlSerializer.ExtensionModel.IServiceRepository)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Types.Sources.AllAssemblyTypes">
            <summary>
            Iterates through all private and public types found in the assembly of the provided reference type.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Types.Sources.AllAssemblyTypes.#ctor(System.Type)">
            <summary>
            Creates a new instance from the provided reference type.
            </summary>
            <param name="referenceType">The reference type of which to query.</param>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Types.Sources.AllAssemblyTypes`1">
            <summary>
            Iterates through all private and public types found in the assembly of the provided reference type.
            </summary>
            <typeparam name="T">The reference type of which to query.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Types.Sources.AllAssemblyTypes`1.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Types.Sources.AllTypesInSameNamespace`1">
            <summary>
            Iterates through all private and public types found in the namespace of the provided reference type.
            </summary>
            <typeparam name="T">The reference type to query.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Types.Sources.AllTypesInSameNamespace`1.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Types.Sources.AllTypesInSameNamespace">
            <summary>
            Iterates through all private and public types found in the namespace of the provided reference type.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Types.Sources.AllTypesInSameNamespace.#ctor(System.Type)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="referenceType">The reference type to query.</param>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Types.Sources.NestedTypes`1">
            <summary>
            Iterates through all private and public nested types found in the provided reference type.
            </summary>
            <typeparam name="T">The reference type to query.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Types.Sources.NestedTypes`1.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Types.Sources.NestedTypes">
            <summary>
            Iterates through all private and public nested types found in the provided reference type.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Types.Sources.NestedTypes.#ctor(System.Type)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="referenceType">The reference type to query.</param>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Types.Sources.PublicAssemblyTypes`1">
            <summary>
            Iterates through all public types found in the assembly of the provided reference type.
            </summary>
            <typeparam name="T">The reference type to query.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Types.Sources.PublicAssemblyTypes`1.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Types.Sources.PublicAssemblyTypes">
            <summary>
            Iterates through all public types found in the assembly of the provided reference type.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Types.Sources.PublicAssemblyTypes.#ctor(System.Type)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="referenceType">The reference type to query.</param>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Types.Sources.PublicNestedTypes`1">
            <summary>
            Iterates through all public nested types found in the provided reference type.
            </summary>
            <typeparam name="T">The type to query.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Types.Sources.PublicNestedTypes`1.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Types.Sources.PublicNestedTypes">
            <summary>
            Iterates through all public nested types found in the provided reference type.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Types.Sources.PublicNestedTypes.#ctor(System.Type)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="referenceType">The reference type to query.</param>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Types.Sources.PublicTypesInSameNamespace`1">
            <summary>
            Iterates through all public types found in the namespace of the provided reference type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Types.Sources.PublicTypesInSameNamespace`1.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Types.Sources.PublicTypesInSameNamespace">
            <summary>
            Iterates through all public types found in the namespace of the provided reference type.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Types.Sources.PublicTypesInSameNamespace.#ctor(System.Type)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="referenceType">The reference type to query.</param>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Types.TypeModelExtension">
            <summary>
            A default extension that defines the type model used for the selection, location, and instantiation of types.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.Types.TypeModelExtension.Default">
            <summary>
            The default instance.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Types.TypeModelExtension.Get(ExtendedXmlSerializer.ExtensionModel.IServiceRepository)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Types.TypeNamesExtension">
            <summary>
            Default extension that tracks registrations for type names, as well as configuration of necessary components for
            successful type name resolution.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Types.TypeNamesExtension.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Types.TypeNamesExtension.#ctor(System.Collections.Generic.IDictionary{System.Reflection.TypeInfo,System.String},System.Collections.Generic.IDictionary{System.Reflection.TypeInfo,System.String})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="names"></param>
            <param name="defaults"></param>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.Types.TypeNamesExtension.Names">
            <summary>
            The current store of name registrations.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Types.TypeNamesExtension.Get(ExtendedXmlSerializer.ExtensionModel.IServiceRepository)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Xml.DeclaredMemberNames">
            <summary>
            A default implementation that selects the name for a member from metadata attributes, specifically the
            <see cref="T:System.Xml.Serialization.XmlAttributeAttribute"/> and <see cref="T:System.Xml.Serialization.XmlElementAttribute"/> attributes (in that order).
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.Xml.DeclaredMemberNames.Default">
            <summary>
            The default instance.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Xml.DeclaredMemberNames.Get(System.Reflection.MemberInfo)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Xml.DefaultMemberOrder">
            <summary>
            Default order selector that looks for a <see cref="P:System.Xml.Serialization.XmlElementAttribute.Order"/> and if not specified, uses the <see cref="P:System.Reflection.MemberInfo.MetadataToken"/>.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.Xml.DefaultMemberOrder.Default">
            <summary>
            The default instance.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Xml.DefaultMemberOrder.#ctor(System.Func{System.Reflection.MemberInfo,System.Xml.Serialization.XmlElementAttribute},System.Func{System.Reflection.MemberInfo,System.Collections.Generic.List{System.Reflection.MemberInfo}})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="attribute"></param>
            <param name="members"></param>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Xml.DefaultMemberOrder.Get(System.Reflection.MemberInfo)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Xml.DefaultMetadataSpecification">
            <summary>
            The default implementation of the metadata specifications, determining the policies used to allow a given field or
            property to be selected as a valid member.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.Xml.DefaultMetadataSpecification.Property">
            <summary>
            Property specification instance that allows a property member if it's an instance (non-static) member, is public,
            and can be read.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.Xml.DefaultMetadataSpecification.Field">
            <summary>
            Field specification instance that allows a field member if it's an instance (non-static) member, public, or if it
            is decorated with either the <see cref="T:System.Xml.Serialization.XmlAttributeAttribute"/> or <see cref="T:System.Xml.Serialization.XmlElementAttribute"/> attributes.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.Xml.DefaultMetadataSpecification.Default">
            <summary>
            The default instance.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Xml.Defaults">
            <summary>
            Convenience class to hold system defaults.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.Xml.Defaults.WriterSettings">
            <summary>
            Default writer settings, which is an unmodified instance of <see cref="T:System.Xml.XmlWriterSettings"/>.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.Xml.Defaults.ReaderSettings">
            <summary>
            Default reader settings, which is an instance of <see cref="T:System.Xml.XmlReaderSettings"/> with its
            <see cref="P:System.Xml.XmlReaderSettings.IgnoreWhitespace"/>, <see cref="P:System.Xml.XmlReaderSettings.IgnoreComments"/>, and
            <see cref="P:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions"/> all set to true.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Xml.ExtendedXmlSerializer">
            <summary>
            Extended Xml Serializer
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Xml.ICustomMemberSerializers">
            <summary>
            Specialized selector that manages custom serializer registration for a specific member.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Xml.ICustomSerializers">
            <summary>
            Specialized selector that manages custom serializer registration for a specific type.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Xml.ICustomXmlSerializers">
            <summary>
            Specialized selector for v1 functionality.  This is unsupported and consumers should use the v2
            <see cref="T:ExtendedXmlSerializer.ExtensionModel.Xml.ICustomSerializers"/> equivalent instead.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Xml.IExtendedXmlCustomSerializer`1">
            <summary>
            A strongly-typed v1 custom serializer.
            </summary>
            <typeparam name="T">The type to serialize.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Xml.IExtendedXmlCustomSerializer`1.Deserialize(System.Xml.Linq.XElement)">
            <summary>
            Deserializes the document subtree from the provided element into a new instance.
            </summary>
            <param name="xElement">The element subtree.</param>
            <returns>An instance from the provided element subtree.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Xml.IExtendedXmlCustomSerializer`1.Serializer(System.Xml.XmlWriter,`0)">
            <summary>
            Serializes an instance.
            </summary>
            <param name="xmlWriter">The writer holding the destination document.</param>
            <param name="obj">The instance to serialize.</param>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Xml.IExtendedXmlCustomSerializer">
            <summary>
            The v1 custom serializer.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Xml.IExtendedXmlCustomSerializer.Deserialize(System.Xml.Linq.XElement)">
            <summary>
            Deserializes the document subtree from the provided element into a new instance.
            </summary>
            <param name="xElement">The element subtree.</param>
            <returns>An instance from the provided element subtree.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Xml.IExtendedXmlCustomSerializer.Serializer(System.Xml.XmlWriter,System.Object)">
            <summary>
            Serializes an instance.
            </summary>
            <param name="xmlWriter">The writer holding the destination document.</param>
            <param name="instance">The instance to serialize.</param>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Xml.IPrefix">
            <summary>
            A specialized selector to expand a provided prefix.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Xml.IPrefixes">
            <summary>
            A prefix store, keyed by <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Xml.ISerializer">
            <summary>
            A baseline XML-based serializer.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Xml.ISerializer.Deserialize(System.Xml.XmlReader)">
            <summary>
            Performs a read operation over the provided document source and resolves an object instance from it.
            </summary>
            <param name="reader">The reader that represents the document source.</param>
            <returns>The instance that is represented by the document.</returns>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Xml.ISerializer.Serialize(System.Xml.XmlWriter,System.Object)">
            <summary>
            Performance a write operation with the provided object instance, and saves it to the destination, represented by
            the provided writer.
            </summary>
            <param name="writer">The destination writer.</param>
            <param name="instance">The source instance.</param>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Xml.IXmlReaderFactory">
            <summary>
            Responsible for providing a reader per deserialization operation.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Xml.IXmlWriterFactory">
            <summary>
            Responsible for providing a writer per serialization operation.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Xml.MemberFormatExtension">
            <summary>
            Default extension used to determine whether to format a given member as an Xml attribute or as an Xml element.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Xml.MemberFormatExtension.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Xml.MemberFormatExtension.#ctor(System.Collections.Generic.IDictionary{System.Reflection.MemberInfo,ExtendedXmlSerializer.ContentModel.Members.IAttributeSpecification},System.Collections.Generic.ICollection{System.Reflection.MemberInfo})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="specifications">Registry of specifications.</param>
            <param name="registered">A collection of registered members.</param>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.Xml.MemberFormatExtension.Specifications">
            <summary>
            Registry of specifications.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ExtensionModel.Xml.MemberFormatExtension.Registered">
            <summary>
            A collection of registered members.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Xml.MemberFormatExtension.Get(ExtendedXmlSerializer.ExtensionModel.IServiceRepository)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Xml.MemberSpecification`1">
            <summary>
            A base component that is used for metadata specifications.
            </summary>
            <typeparam name="T">The member metadata type.</typeparam>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Xml.MemberSpecification`1.#ctor(ExtendedXmlSerializer.Core.Specifications.ISpecification{`0})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="specification">A supplemental specification.</param>
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Xml.PrefixRegistryExtension">
            <summary>
            An extension used to customize prefix registration.
            </summary>
            <seealso href="https://github.com/ExtendedXmlSerializer/home/issues/199"/>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Xml.PrefixRegistryExtension.#ctor(System.Collections.Generic.IDictionary{System.Type,System.String})">
            <summary>
            Creates a new instance.
            </summary>
            <param name="registry">The registry store.</param>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Xml.PrefixRegistryExtension.Get(ExtendedXmlSerializer.ExtensionModel.IServiceRepository)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Xml.XmlReaderFactory">
            <summary>
            Component used to create a new <see cref="T:System.Xml.XmlReader"/> for each deserialization operation.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Xml.XmlReaderFactory.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Xml.XmlReaderFactory.#ctor(System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="settings"></param>
            <param name="context"></param>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Xml.XmlReaderFactory.Get(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Xml.XmlReaderFactory.Get(System.IO.TextReader)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ExtensionModel.Xml.XmlSerializationExtension">
            <summary>
            A default extension that is used to configure all necessary components for xml-specific serialization and
            deserialization.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Xml.XmlSerializationExtension.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Xml.XmlSerializationExtension.#ctor(System.Xml.XmlReaderSettings,System.Xml.XmlWriterSettings,System.Xml.XmlNameTable)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="reader"></param>
            <param name="writer"></param>
            <param name="names"></param>
        </member>
        <member name="M:ExtendedXmlSerializer.ExtensionModel.Xml.XmlSerializationExtension.Get(ExtendedXmlSerializer.ExtensionModel.IServiceRepository)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.IExtendedXmlSerializer">
            <summary>
            The root Xml serializer component.  This is what is created by the configuration container and is used to serialize
            objects from memory into a destination and deserialize objects into memory from a source.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ReflectionModel.AssemblyPath">
            <summary>
            Attribution: https://stackoverflow.com/a/6131116/10340424
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ReflectionModel.IGeneric`1">
            <summary>
            Provides a mechanism to dynamically access a generic singleton by away of typed parameter.
            </summary>
            <typeparam name="T">The singleton type.</typeparam>
        </member>
        <member name="T:ExtendedXmlSerializer.ReflectionModel.IGeneric`2">
            <summary>
            Provides a mechanism to dynamically create generic objects by way of typed parameters.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T">The instantiated generic type instance.</typeparam>
        </member>
        <member name="T:ExtendedXmlSerializer.ReflectionModel.IGeneric`3">
            <summary>
            Provides a mechanism to dynamically create generic objects by way of typed parameters.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T">The instantiated generic type instance.</typeparam>
        </member>
        <member name="T:ExtendedXmlSerializer.ReflectionModel.IGeneric`4">
            <summary>
            Provides a mechanism to dynamically create generic objects by way of typed parameters.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T">The instantiated generic type instance.</typeparam>
        </member>
        <member name="T:ExtendedXmlSerializer.ReflectionModel.IGeneric`5">
            <summary>
            Provides a mechanism to dynamically create generic objects by way of typed parameters.
            </summary>
            <typeparam name="T1">The first parameter type.</typeparam>
            <typeparam name="T2">The second parameter type.</typeparam>
            <typeparam name="T3">The third parameter type.</typeparam>
            <typeparam name="T4">The fourth parameter type.</typeparam>
            <typeparam name="T">The instantiated generic type instance.</typeparam>
        </member>
        <member name="T:ExtendedXmlSerializer.ReflectionModel.IMemberTable`1">
            <summary>
            Represents a store that is keyed on member metadata.
            </summary>
            <typeparam name="T">The value type.</typeparam>
        </member>
        <member name="T:ExtendedXmlSerializer.ReflectionModel.IMetadataTable`2">
            <summary>
            A table that is keyed on reflection metadata.
            </summary>
            <typeparam name="TMetadata">The metadata type.</typeparam>
            <typeparam name="TValue">The value type.</typeparam>
        </member>
        <member name="T:ExtendedXmlSerializer.ReflectionModel.IsAssignableSpecification`1">
            <summary>
            Specification that encapsulates the <see cref="M:System.Type.IsAssignableFrom(System.Type)"/> method.
            </summary>
            <typeparam name="T">The reference type used to call the `IsAssignableFrom`.</typeparam>
        </member>
        <member name="P:ExtendedXmlSerializer.ReflectionModel.IsAssignableSpecification`1.Default">
            <summary>
            The default instance.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ReflectionModel.IsAssignableSpecification">
            <summary>
            Specification that encapsulates the <see cref="M:System.Type.IsAssignableFrom(System.Type)"/> method.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ReflectionModel.IsAssignableSpecification.Defaults">
            <summary>
            Store of specification instances, keyed on type.
            </summary>
        </member>
        <member name="P:ExtendedXmlSerializer.ReflectionModel.IsAssignableSpecification.Delegates">
            <summary>
            Store of specification delegates, keyed on type.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ReflectionModel.IsTypeSpecification`1">
            <summary>
            Specification to determine if a given object is of the referenced type.
            </summary>
            <typeparam name="T">The referenced type.</typeparam>
        </member>
        <member name="P:ExtendedXmlSerializer.ReflectionModel.IsTypeSpecification`1.Default">
            <summary>
            The default instance.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ReflectionModel.IsTypeSpecification`1.IsSatisfiedBy(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ReflectionModel.ITypeComparer">
            <summary>
            Used to compare types.
            </summary>
        </member>
        <member name="T:ExtendedXmlSerializer.ReflectionModel.ITypedTable`1">
            <summary>
            Represents a store keyed on type metadata.
            </summary>
            <typeparam name="T">The value type.</typeparam>
        </member>
        <member name="T:ExtendedXmlSerializer.ReflectionModel.MemberTable`1">
            <inheritdoc cref="T:ExtendedXmlSerializer.ReflectionModel.IMemberTable`1" />
        </member>
        <member name="M:ExtendedXmlSerializer.ReflectionModel.MemberTable`1.#ctor">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.ReflectionModel.MemberTable`1.#ctor(System.Collections.Generic.IDictionary{System.Reflection.MemberInfo,`0})">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ReflectionModel.TypedTable`1">
            <inheritdoc cref="T:ExtendedXmlSerializer.ReflectionModel.ITypedTable`1" />
        </member>
        <member name="M:ExtendedXmlSerializer.ReflectionModel.TypedTable`1.#ctor">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.ReflectionModel.TypedTable`1.#ctor(System.Collections.Generic.IDictionary{System.Reflection.TypeInfo,`0})">
            <inheritdoc />
        </member>
        <member name="T:ExtendedXmlSerializer.ReflectionModel.TypeIdentityComparerBase">
            <summary>
            A baseline implementation of <see cref="T:ExtendedXmlSerializer.ReflectionModel.ITypeComparer"/> for type comparison.
            </summary>
        </member>
        <member name="M:ExtendedXmlSerializer.ReflectionModel.TypeIdentityComparerBase.Equals(System.Reflection.TypeInfo,System.Reflection.TypeInfo)">
            <inheritdoc />
        </member>
        <member name="M:ExtendedXmlSerializer.ReflectionModel.TypeIdentityComparerBase.GetHashCode(System.Reflection.TypeInfo)">
            <inheritdoc />
        </member>
        <member name="T:System.Runtime.Serialization.ISerializationSurrogateProvider">
            <exclude />
        </member>
        <member name="M:System.Runtime.Serialization.ISerializationSurrogateProvider.GetDeserializedObject(System.Object,System.Type)">
            <exclude />
        </member>
        <member name="M:System.Runtime.Serialization.ISerializationSurrogateProvider.GetObjectToSerialize(System.Object,System.Type)">
            <exclude />
        </member>
        <member name="M:System.Runtime.Serialization.ISerializationSurrogateProvider.GetSurrogateType(System.Type)">
            <exclude />
        </member>
    </members>
</doc>
